// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.6.1
// source: webui/friends.proto

package friends

import (
	unified "github.com/Philipp15b/go-steam/protocol/protobuf/unified"
	protobuf "github.com/Philipp15b/go-steam/protocol/protobuf"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CCommunity_GetApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids   []int32 `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
	Language *uint32 `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
}

func (x *CCommunity_GetApps_Request) Reset() {
	*x = CCommunity_GetApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetApps_Request) ProtoMessage() {}

func (x *CCommunity_GetApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetApps_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetApps_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{0}
}

func (x *CCommunity_GetApps_Request) GetAppids() []int32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CCommunity_GetApps_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CCommunity_GetApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*protobuf.CCDDBAppDetailCommon `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (x *CCommunity_GetApps_Response) Reset() {
	*x = CCommunity_GetApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetApps_Response) ProtoMessage() {}

func (x *CCommunity_GetApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetApps_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetApps_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{1}
}

func (x *CCommunity_GetApps_Response) GetApps() []*protobuf.CCDDBAppDetailCommon {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CCommunity_GetAppRichPresenceLocalization_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *int32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Request) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{2}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CCommunity_GetAppRichPresenceLocalization_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *int32                                                          `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	TokenLists []*CCommunity_GetAppRichPresenceLocalization_Response_TokenList `protobuf:"bytes,2,rep,name=token_lists,json=tokenLists" json:"token_lists,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{3}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) GetTokenLists() []*CCommunity_GetAppRichPresenceLocalization_Response_TokenList {
	if x != nil {
		return x.TokenLists
	}
	return nil
}

type CCommunity_GetAppRichPresenceLocalization_Response_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response_Token) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response_Token.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response_Token) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{4}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCommunity_GetAppRichPresenceLocalization_Response_TokenList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string                                                     `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Tokens   []*CCommunity_GetAppRichPresenceLocalization_Response_Token `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response_TokenList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response_TokenList) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response_TokenList.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response_TokenList) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{5}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) GetTokens() []*CCommunity_GetAppRichPresenceLocalization_Response_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CCommunity_Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment    *uint64                 `protobuf:"fixed64,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Steamid       *uint64                 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Timestamp     *uint32                 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Text          *string                 `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Upvotes       *int32                  `protobuf:"varint,5,opt,name=upvotes" json:"upvotes,omitempty"`
	Hidden        *bool                   `protobuf:"varint,6,opt,name=hidden" json:"hidden,omitempty"`
	HiddenByUser  *bool                   `protobuf:"varint,7,opt,name=hidden_by_user,json=hiddenByUser" json:"hidden_by_user,omitempty"`
	Deleted       *bool                   `protobuf:"varint,8,opt,name=deleted" json:"deleted,omitempty"`
	Ipaddress     *protobuf.CMsgIPAddress `protobuf:"bytes,9,opt,name=ipaddress" json:"ipaddress,omitempty"`
	TotalHidden   *int32                  `protobuf:"varint,10,opt,name=total_hidden,json=totalHidden" json:"total_hidden,omitempty"`
	UpvotedByUser *bool                   `protobuf:"varint,11,opt,name=upvoted_by_user,json=upvotedByUser" json:"upvoted_by_user,omitempty"`
}

func (x *CCommunity_Comment) Reset() {
	*x = CCommunity_Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_Comment) ProtoMessage() {}

func (x *CCommunity_Comment) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_Comment.ProtoReflect.Descriptor instead.
func (*CCommunity_Comment) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{6}
}

func (x *CCommunity_Comment) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_Comment) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_Comment) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCommunity_Comment) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CCommunity_Comment) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_Comment) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *CCommunity_Comment) GetHiddenByUser() bool {
	if x != nil && x.HiddenByUser != nil {
		return *x.HiddenByUser
	}
	return false
}

func (x *CCommunity_Comment) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CCommunity_Comment) GetIpaddress() *protobuf.CMsgIPAddress {
	if x != nil {
		return x.Ipaddress
	}
	return nil
}

func (x *CCommunity_Comment) GetTotalHidden() int32 {
	if x != nil && x.TotalHidden != nil {
		return *x.TotalHidden
	}
	return 0
}

func (x *CCommunity_Comment) GetUpvotedByUser() bool {
	if x != nil && x.UpvotedByUser != nil {
		return *x.UpvotedByUser
	}
	return false
}

type CCommunity_GetCommentThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments        []*CCommunity_Comment `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
	DeletedComments []*CCommunity_Comment `protobuf:"bytes,2,rep,name=deleted_comments,json=deletedComments" json:"deleted_comments,omitempty"`
	Steamid         *uint64               `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	Commentthreadid *uint64               `protobuf:"fixed64,4,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Start           *int32                `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
	Count           *int32                `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	TotalCount      *int32                `protobuf:"varint,7,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Upvotes         *int32                `protobuf:"varint,8,opt,name=upvotes" json:"upvotes,omitempty"`
	Upvoters        []uint32              `protobuf:"varint,9,rep,name=upvoters" json:"upvoters,omitempty"`
	UserSubscribed  *bool                 `protobuf:"varint,10,opt,name=user_subscribed,json=userSubscribed" json:"user_subscribed,omitempty"`
	UserUpvoted     *bool                 `protobuf:"varint,11,opt,name=user_upvoted,json=userUpvoted" json:"user_upvoted,omitempty"`
	AnswerCommentid *uint64               `protobuf:"fixed64,12,opt,name=answer_commentid,json=answerCommentid" json:"answer_commentid,omitempty"`
	AnswerActor     *uint32               `protobuf:"varint,13,opt,name=answer_actor,json=answerActor" json:"answer_actor,omitempty"`
	AnswerActorRank *int32                `protobuf:"varint,14,opt,name=answer_actor_rank,json=answerActorRank" json:"answer_actor_rank,omitempty"`
	CanPost         *bool                 `protobuf:"varint,15,opt,name=can_post,json=canPost" json:"can_post,omitempty"`
}

func (x *CCommunity_GetCommentThread_Response) Reset() {
	*x = CCommunity_GetCommentThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThread_Response) ProtoMessage() {}

func (x *CCommunity_GetCommentThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThread_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{7}
}

func (x *CCommunity_GetCommentThread_Response) GetComments() []*CCommunity_Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetDeletedComments() []*CCommunity_Comment {
	if x != nil {
		return x.DeletedComments
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetUpvoters() []uint32 {
	if x != nil {
		return x.Upvoters
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetUserSubscribed() bool {
	if x != nil && x.UserSubscribed != nil {
		return *x.UserSubscribed
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetUserUpvoted() bool {
	if x != nil && x.UserUpvoted != nil {
		return *x.UserUpvoted
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerCommentid() uint64 {
	if x != nil && x.AnswerCommentid != nil {
		return *x.AnswerCommentid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerActor() uint32 {
	if x != nil && x.AnswerActor != nil {
		return *x.AnswerActor
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerActorRank() int32 {
	if x != nil && x.AnswerActorRank != nil {
		return *x.AnswerActorRank
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCanPost() bool {
	if x != nil && x.CanPost != nil {
		return *x.CanPost
	}
	return false
}

type CCommunity_PostCommentToThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment      *uint64 `protobuf:"fixed64,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Commentthreadid *uint64 `protobuf:"fixed64,2,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Count           *int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Upvotes         *int32  `protobuf:"varint,4,opt,name=upvotes" json:"upvotes,omitempty"`
}

func (x *CCommunity_PostCommentToThread_Response) Reset() {
	*x = CCommunity_PostCommentToThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PostCommentToThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PostCommentToThread_Response) ProtoMessage() {}

func (x *CCommunity_PostCommentToThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PostCommentToThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PostCommentToThread_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{8}
}

func (x *CCommunity_PostCommentToThread_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

type CCommunity_DeleteCommentFromThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_DeleteCommentFromThread_Response) Reset() {
	*x = CCommunity_DeleteCommentFromThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_DeleteCommentFromThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_DeleteCommentFromThread_Response) ProtoMessage() {}

func (x *CCommunity_DeleteCommentFromThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_DeleteCommentFromThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_DeleteCommentFromThread_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{9}
}

type CCommunity_RateCommentThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment      *uint64 `protobuf:"varint,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Commentthreadid *uint64 `protobuf:"varint,2,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Count           *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Upvotes         *uint32 `protobuf:"varint,4,opt,name=upvotes" json:"upvotes,omitempty"`
	HasUpvoted      *bool   `protobuf:"varint,5,opt,name=has_upvoted,json=hasUpvoted" json:"has_upvoted,omitempty"`
}

func (x *CCommunity_RateCommentThread_Response) Reset() {
	*x = CCommunity_RateCommentThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateCommentThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateCommentThread_Response) ProtoMessage() {}

func (x *CCommunity_RateCommentThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateCommentThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_RateCommentThread_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{10}
}

func (x *CCommunity_RateCommentThread_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetHasUpvoted() bool {
	if x != nil && x.HasUpvoted != nil {
		return *x.HasUpvoted
	}
	return false
}

type CCommunity_GetCommentThreadRatings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commentthreadid   *uint64  `protobuf:"varint,1,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Gidcomment        *uint64  `protobuf:"varint,2,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Upvotes           *uint32  `protobuf:"varint,3,opt,name=upvotes" json:"upvotes,omitempty"`
	HasUpvoted        *bool    `protobuf:"varint,4,opt,name=has_upvoted,json=hasUpvoted" json:"has_upvoted,omitempty"`
	UpvoterAccountids []uint32 `protobuf:"varint,5,rep,name=upvoter_accountids,json=upvoterAccountids" json:"upvoter_accountids,omitempty"`
}

func (x *CCommunity_GetCommentThreadRatings_Response) Reset() {
	*x = CCommunity_GetCommentThreadRatings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThreadRatings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThreadRatings_Response) ProtoMessage() {}

func (x *CCommunity_GetCommentThreadRatings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThreadRatings_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThreadRatings_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{11}
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetHasUpvoted() bool {
	if x != nil && x.HasUpvoted != nil {
		return *x.HasUpvoted
	}
	return false
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetUpvoterAccountids() []uint32 {
	if x != nil {
		return x.UpvoterAccountids
	}
	return nil
}

type CCommunity_RateClanAnnouncement_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_RateClanAnnouncement_Response) Reset() {
	*x = CCommunity_RateClanAnnouncement_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateClanAnnouncement_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateClanAnnouncement_Response) ProtoMessage() {}

func (x *CCommunity_RateClanAnnouncement_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateClanAnnouncement_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_RateClanAnnouncement_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{12}
}

type CCommunity_GetClanAnnouncementVoteForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VotedUp   *bool `protobuf:"varint,1,opt,name=voted_up,json=votedUp" json:"voted_up,omitempty"`
	VotedDown *bool `protobuf:"varint,2,opt,name=voted_down,json=votedDown" json:"voted_down,omitempty"`
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) Reset() {
	*x = CCommunity_GetClanAnnouncementVoteForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanAnnouncementVoteForUser_Response) ProtoMessage() {}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanAnnouncementVoteForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanAnnouncementVoteForUser_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{13}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) GetVotedUp() bool {
	if x != nil && x.VotedUp != nil {
		return *x.VotedUp
	}
	return false
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) GetVotedDown() bool {
	if x != nil && x.VotedDown != nil {
		return *x.VotedDown
	}
	return false
}

type CAppPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority *uint32  `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Appid    []uint32 `protobuf:"varint,2,rep,name=appid" json:"appid,omitempty"`
}

func (x *CAppPriority) Reset() {
	*x = CAppPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppPriority) ProtoMessage() {}

func (x *CAppPriority) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppPriority.ProtoReflect.Descriptor instead.
func (*CAppPriority) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{14}
}

func (x *CAppPriority) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *CAppPriority) GetAppid() []uint32 {
	if x != nil {
		return x.Appid
	}
	return nil
}

type CCommunity_GetUserPartnerEventNews_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*protobuf.CClanMatchEventByRange `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventNews_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventNews_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventNews_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventNews_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventNews_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventNews_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventNews_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{15}
}

func (x *CCommunity_GetUserPartnerEventNews_Response) GetResults() []*protobuf.CClanMatchEventByRange {
	if x != nil {
		return x.Results
	}
	return nil
}

type CCommunity_PartnerEventResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clanid              *uint32 `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid            *uint64 `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	AnnouncementGid     *uint64 `protobuf:"fixed64,3,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	Appid               *uint32 `protobuf:"varint,4,opt,name=appid" json:"appid,omitempty"`
	PossibleTakeover    *bool   `protobuf:"varint,5,opt,name=possible_takeover,json=possibleTakeover" json:"possible_takeover,omitempty"`
	Rtime32LastModified *uint32 `protobuf:"varint,6,opt,name=rtime32_last_modified,json=rtime32LastModified,def=0" json:"rtime32_last_modified,omitempty"`
	UserAppPriority     *int32  `protobuf:"varint,7,opt,name=user_app_priority,json=userAppPriority" json:"user_app_priority,omitempty"`
}

// Default values for CCommunity_PartnerEventResult fields.
const (
	Default_CCommunity_PartnerEventResult_Rtime32LastModified = uint32(0)
)

func (x *CCommunity_PartnerEventResult) Reset() {
	*x = CCommunity_PartnerEventResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventResult) ProtoMessage() {}

func (x *CCommunity_PartnerEventResult) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventResult.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventResult) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{16}
}

func (x *CCommunity_PartnerEventResult) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetPossibleTakeover() bool {
	if x != nil && x.PossibleTakeover != nil {
		return *x.PossibleTakeover
	}
	return false
}

func (x *CCommunity_PartnerEventResult) GetRtime32LastModified() uint32 {
	if x != nil && x.Rtime32LastModified != nil {
		return *x.Rtime32LastModified
	}
	return Default_CCommunity_PartnerEventResult_Rtime32LastModified
}

func (x *CCommunity_PartnerEventResult) GetUserAppPriority() int32 {
	if x != nil && x.UserAppPriority != nil {
		return *x.UserAppPriority
	}
	return 0
}

type CCommunity_GetBestEventsForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CCommunity_PartnerEventResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CCommunity_GetBestEventsForUser_Response) Reset() {
	*x = CCommunity_GetBestEventsForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetBestEventsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBestEventsForUser_Response) ProtoMessage() {}

func (x *CCommunity_GetBestEventsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBestEventsForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBestEventsForUser_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{17}
}

func (x *CCommunity_GetBestEventsForUser_Response) GetResults() []*CCommunity_PartnerEventResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type CCommunity_ClearUserPartnerEventsAppPriorities_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) Reset() {
	*x = CCommunity_ClearUserPartnerEventsAppPriorities_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearUserPartnerEventsAppPriorities_Response) ProtoMessage() {}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearUserPartnerEventsAppPriorities_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearUserPartnerEventsAppPriorities_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{18}
}

type CCommunity_PartnerEventsAppPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	UserAppPriority *int32  `protobuf:"varint,2,opt,name=user_app_priority,json=userAppPriority" json:"user_app_priority,omitempty"`
}

func (x *CCommunity_PartnerEventsAppPriority) Reset() {
	*x = CCommunity_PartnerEventsAppPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsAppPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsAppPriority) ProtoMessage() {}

func (x *CCommunity_PartnerEventsAppPriority) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsAppPriority.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsAppPriority) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{19}
}

func (x *CCommunity_PartnerEventsAppPriority) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_PartnerEventsAppPriority) GetUserAppPriority() int32 {
	if x != nil && x.UserAppPriority != nil {
		return *x.UserAppPriority
	}
	return 0
}

type CCommunity_GetUserPartnerEventsAppPriorities_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priorities []*CCommunity_PartnerEventsAppPriority `protobuf:"bytes,1,rep,name=priorities" json:"priorities,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventsAppPriorities_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventsAppPriorities_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventsAppPriorities_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventsAppPriorities_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{20}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) GetPriorities() []*CCommunity_PartnerEventsAppPriority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

type CCommunity_ClearSinglePartnerEventsAppPriority_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) Reset() {
	*x = CCommunity_ClearSinglePartnerEventsAppPriority_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearSinglePartnerEventsAppPriority_Response) ProtoMessage() {}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearSinglePartnerEventsAppPriority_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearSinglePartnerEventsAppPriority_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{21}
}

type CCommunity_PartnerEventsShowMoreForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) Reset() {
	*x = CCommunity_PartnerEventsShowMoreForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowMoreForApp_Response) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowMoreForApp_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowMoreForApp_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{22}
}

type CCommunity_PartnerEventsShowLessForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) Reset() {
	*x = CCommunity_PartnerEventsShowLessForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowLessForApp_Response) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowLessForApp_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowLessForApp_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{23}
}

type CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clanid          *uint32 `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid        *uint64 `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	DisplayLocation *int32  `protobuf:"varint,3,opt,name=display_location,json=displayLocation" json:"display_location,omitempty"`
	MarkShown       *bool   `protobuf:"varint,4,opt,name=mark_shown,json=markShown" json:"mark_shown,omitempty"`
	MarkRead        *bool   `protobuf:"varint,5,opt,name=mark_read,json=markRead" json:"mark_read,omitempty"`
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{24}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetDisplayLocation() int32 {
	if x != nil && x.DisplayLocation != nil {
		return *x.DisplayLocation
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetMarkShown() bool {
	if x != nil && x.MarkShown != nil {
		return *x.MarkShown
	}
	return false
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetMarkRead() bool {
	if x != nil && x.MarkRead != nil {
		return *x.MarkRead
	}
	return false
}

type CCommunity_MarkPartnerEventsForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_MarkPartnerEventsForUser_Response) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_MarkPartnerEventsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Response) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{25}
}

type CCommunity_GetUserPartnerEventViewStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventViewStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventViewStatus_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventViewStatus_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventViewStatus_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{26}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) GetEvents() []*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventGid      *uint64 `protobuf:"fixed64,1,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	LastShownTime *uint32 `protobuf:"varint,2,opt,name=last_shown_time,json=lastShownTime" json:"last_shown_time,omitempty"`
	LastReadTime  *uint32 `protobuf:"varint,3,opt,name=last_read_time,json=lastReadTime" json:"last_read_time,omitempty"`
	ClanAccountId *uint32 `protobuf:"varint,4,opt,name=clan_account_id,json=clanAccountId" json:"clan_account_id,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) Reset() {
	*x = CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{27}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetLastShownTime() uint32 {
	if x != nil && x.LastShownTime != nil {
		return *x.LastShownTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetLastReadTime() uint32 {
	if x != nil && x.LastReadTime != nil {
		return *x.LastReadTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetClanAccountId() uint32 {
	if x != nil && x.ClanAccountId != nil {
		return *x.ClanAccountId
	}
	return 0
}

type ProfileItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communityitemid *uint64 `protobuf:"varint,1,opt,name=communityitemid" json:"communityitemid,omitempty"`
	ImageSmall      *string `protobuf:"bytes,2,opt,name=image_small,json=imageSmall" json:"image_small,omitempty"`
	ImageLarge      *string `protobuf:"bytes,3,opt,name=image_large,json=imageLarge" json:"image_large,omitempty"`
	Name            *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	ItemTitle       *string `protobuf:"bytes,5,opt,name=item_title,json=itemTitle" json:"item_title,omitempty"`
	ItemDescription *string `protobuf:"bytes,6,opt,name=item_description,json=itemDescription" json:"item_description,omitempty"`
	Appid           *uint32 `protobuf:"varint,7,opt,name=appid" json:"appid,omitempty"`
	ItemType        *uint32 `protobuf:"varint,8,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	ItemClass       *uint32 `protobuf:"varint,9,opt,name=item_class,json=itemClass" json:"item_class,omitempty"`
	MovieWebm       *string `protobuf:"bytes,10,opt,name=movie_webm,json=movieWebm" json:"movie_webm,omitempty"`
	MovieMp4        *string `protobuf:"bytes,11,opt,name=movie_mp4,json=movieMp4" json:"movie_mp4,omitempty"`
}

func (x *ProfileItem) Reset() {
	*x = ProfileItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileItem) ProtoMessage() {}

func (x *ProfileItem) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileItem.ProtoReflect.Descriptor instead.
func (*ProfileItem) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{28}
}

func (x *ProfileItem) GetCommunityitemid() uint64 {
	if x != nil && x.Communityitemid != nil {
		return *x.Communityitemid
	}
	return 0
}

func (x *ProfileItem) GetImageSmall() string {
	if x != nil && x.ImageSmall != nil {
		return *x.ImageSmall
	}
	return ""
}

func (x *ProfileItem) GetImageLarge() string {
	if x != nil && x.ImageLarge != nil {
		return *x.ImageLarge
	}
	return ""
}

func (x *ProfileItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProfileItem) GetItemTitle() string {
	if x != nil && x.ItemTitle != nil {
		return *x.ItemTitle
	}
	return ""
}

func (x *ProfileItem) GetItemDescription() string {
	if x != nil && x.ItemDescription != nil {
		return *x.ItemDescription
	}
	return ""
}

func (x *ProfileItem) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *ProfileItem) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *ProfileItem) GetItemClass() uint32 {
	if x != nil && x.ItemClass != nil {
		return *x.ItemClass
	}
	return 0
}

func (x *ProfileItem) GetMovieWebm() string {
	if x != nil && x.MovieWebm != nil {
		return *x.MovieWebm
	}
	return ""
}

func (x *ProfileItem) GetMovieMp4() string {
	if x != nil && x.MovieMp4 != nil {
		return *x.MovieMp4
	}
	return ""
}

type CPlayer_GetProfileBackground_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileBackground *ProfileItem `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
}

func (x *CPlayer_GetProfileBackground_Response) Reset() {
	*x = CPlayer_GetProfileBackground_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{29}
}

func (x *CPlayer_GetProfileBackground_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

type CPlayer_SetProfileBackground_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetProfileBackground_Response) Reset() {
	*x = CPlayer_SetProfileBackground_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_SetProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{30}
}

type CPlayer_GetMiniProfileBackground_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileBackground *ProfileItem `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
}

func (x *CPlayer_GetMiniProfileBackground_Response) Reset() {
	*x = CPlayer_GetMiniProfileBackground_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetMiniProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMiniProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_GetMiniProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMiniProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMiniProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{31}
}

func (x *CPlayer_GetMiniProfileBackground_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

type CPlayer_SetMiniProfileBackground_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetMiniProfileBackground_Response) Reset() {
	*x = CPlayer_SetMiniProfileBackground_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetMiniProfileBackground_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetMiniProfileBackground_Response) ProtoMessage() {}

func (x *CPlayer_SetMiniProfileBackground_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetMiniProfileBackground_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetMiniProfileBackground_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{32}
}

type CPlayer_GetAvatarFrame_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarFrame *ProfileItem `protobuf:"bytes,1,opt,name=avatar_frame,json=avatarFrame" json:"avatar_frame,omitempty"`
}

func (x *CPlayer_GetAvatarFrame_Response) Reset() {
	*x = CPlayer_GetAvatarFrame_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAvatarFrame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAvatarFrame_Response) ProtoMessage() {}

func (x *CPlayer_GetAvatarFrame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAvatarFrame_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAvatarFrame_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{33}
}

func (x *CPlayer_GetAvatarFrame_Response) GetAvatarFrame() *ProfileItem {
	if x != nil {
		return x.AvatarFrame
	}
	return nil
}

type CPlayer_SetAvatarFrame_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetAvatarFrame_Response) Reset() {
	*x = CPlayer_SetAvatarFrame_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetAvatarFrame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAvatarFrame_Response) ProtoMessage() {}

func (x *CPlayer_SetAvatarFrame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAvatarFrame_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAvatarFrame_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{34}
}

type CPlayer_GetAnimatedAvatar_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar *ProfileItem `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
}

func (x *CPlayer_GetAnimatedAvatar_Response) Reset() {
	*x = CPlayer_GetAnimatedAvatar_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetAnimatedAvatar_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetAnimatedAvatar_Response) ProtoMessage() {}

func (x *CPlayer_GetAnimatedAvatar_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetAnimatedAvatar_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetAnimatedAvatar_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{35}
}

func (x *CPlayer_GetAnimatedAvatar_Response) GetAvatar() *ProfileItem {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type CPlayer_SetAnimatedAvatar_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPlayer_SetAnimatedAvatar_Response) Reset() {
	*x = CPlayer_SetAnimatedAvatar_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_SetAnimatedAvatar_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetAnimatedAvatar_Response) ProtoMessage() {}

func (x *CPlayer_SetAnimatedAvatar_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetAnimatedAvatar_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetAnimatedAvatar_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{36}
}

type CPlayer_GetProfileItemsOwned_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileBackgrounds     []*ProfileItem `protobuf:"bytes,1,rep,name=profile_backgrounds,json=profileBackgrounds" json:"profile_backgrounds,omitempty"`
	MiniProfileBackgrounds []*ProfileItem `protobuf:"bytes,2,rep,name=mini_profile_backgrounds,json=miniProfileBackgrounds" json:"mini_profile_backgrounds,omitempty"`
	AvatarFrames           []*ProfileItem `protobuf:"bytes,3,rep,name=avatar_frames,json=avatarFrames" json:"avatar_frames,omitempty"`
	AnimatedAvatars        []*ProfileItem `protobuf:"bytes,4,rep,name=animated_avatars,json=animatedAvatars" json:"animated_avatars,omitempty"`
}

func (x *CPlayer_GetProfileItemsOwned_Response) Reset() {
	*x = CPlayer_GetProfileItemsOwned_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileItemsOwned_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsOwned_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsOwned_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsOwned_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsOwned_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{37}
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetProfileBackgrounds() []*ProfileItem {
	if x != nil {
		return x.ProfileBackgrounds
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetMiniProfileBackgrounds() []*ProfileItem {
	if x != nil {
		return x.MiniProfileBackgrounds
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetAvatarFrames() []*ProfileItem {
	if x != nil {
		return x.AvatarFrames
	}
	return nil
}

func (x *CPlayer_GetProfileItemsOwned_Response) GetAnimatedAvatars() []*ProfileItem {
	if x != nil {
		return x.AnimatedAvatars
	}
	return nil
}

type CPlayer_GetProfileItemsEquipped_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileBackground     *ProfileItem `protobuf:"bytes,1,opt,name=profile_background,json=profileBackground" json:"profile_background,omitempty"`
	MiniProfileBackground *ProfileItem `protobuf:"bytes,2,opt,name=mini_profile_background,json=miniProfileBackground" json:"mini_profile_background,omitempty"`
	AvatarFrame           *ProfileItem `protobuf:"bytes,3,opt,name=avatar_frame,json=avatarFrame" json:"avatar_frame,omitempty"`
	AnimatedAvatar        *ProfileItem `protobuf:"bytes,4,opt,name=animated_avatar,json=animatedAvatar" json:"animated_avatar,omitempty"`
}

func (x *CPlayer_GetProfileItemsEquipped_Response) Reset() {
	*x = CPlayer_GetProfileItemsEquipped_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPlayer_GetProfileItemsEquipped_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetProfileItemsEquipped_Response) ProtoMessage() {}

func (x *CPlayer_GetProfileItemsEquipped_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetProfileItemsEquipped_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetProfileItemsEquipped_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{38}
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetProfileBackground() *ProfileItem {
	if x != nil {
		return x.ProfileBackground
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetMiniProfileBackground() *ProfileItem {
	if x != nil {
		return x.MiniProfileBackground
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetAvatarFrame() *ProfileItem {
	if x != nil {
		return x.AvatarFrame
	}
	return nil
}

func (x *CPlayer_GetProfileItemsEquipped_Response) GetAnimatedAvatar() *ProfileItem {
	if x != nil {
		return x.AnimatedAvatar
	}
	return nil
}

type CWebRTCClient_InitiateWebRTCConnection_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp *string `protobuf:"bytes,1,opt,name=sdp" json:"sdp,omitempty"`
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) Reset() {
	*x = CWebRTCClient_InitiateWebRTCConnection_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_InitiateWebRTCConnection_Request) ProtoMessage() {}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_InitiateWebRTCConnection_Request.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_InitiateWebRTCConnection_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{39}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) GetSdp() string {
	if x != nil && x.Sdp != nil {
		return *x.Sdp
	}
	return ""
}

type CWebRTCClient_InitiateWebRTCConnection_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDescription *string `protobuf:"bytes,1,opt,name=remote_description,json=remoteDescription" json:"remote_description,omitempty"`
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) Reset() {
	*x = CWebRTCClient_InitiateWebRTCConnection_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_InitiateWebRTCConnection_Response) ProtoMessage() {}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_InitiateWebRTCConnection_Response.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_InitiateWebRTCConnection_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{40}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) GetRemoteDescription() string {
	if x != nil && x.RemoteDescription != nil {
		return *x.RemoteDescription
	}
	return ""
}

type CWebRTC_WebRTCSessionConnected_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssrc       *uint32 `protobuf:"varint,1,opt,name=ssrc" json:"ssrc,omitempty"`
	ClientIp   *uint32 `protobuf:"varint,2,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ClientPort *uint32 `protobuf:"varint,3,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerIp   *uint32 `protobuf:"varint,4,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort *uint32 `protobuf:"varint,5,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) Reset() {
	*x = CWebRTC_WebRTCSessionConnected_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCSessionConnected_Notification) ProtoMessage() {}

func (x *CWebRTC_WebRTCSessionConnected_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCSessionConnected_Notification.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCSessionConnected_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{41}
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetSsrc() uint32 {
	if x != nil && x.Ssrc != nil {
		return *x.Ssrc
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetClientIp() uint32 {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

type CWebRTC_WebRTCUpdateRemoteDescription_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDescription        *string                                                                       `protobuf:"bytes,1,opt,name=remote_description,json=remoteDescription" json:"remote_description,omitempty"`
	RemoteDescriptionVersion *uint64                                                                       `protobuf:"varint,2,opt,name=remote_description_version,json=remoteDescriptionVersion" json:"remote_description_version,omitempty"`
	SsrcsToAccountids        []*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping `protobuf:"bytes,3,rep,name=ssrcs_to_accountids,json=ssrcsToAccountids" json:"ssrcs_to_accountids,omitempty"`
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) Reset() {
	*x = CWebRTC_WebRTCUpdateRemoteDescription_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification) ProtoMessage() {}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCUpdateRemoteDescription_Notification.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{42}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetRemoteDescription() string {
	if x != nil && x.RemoteDescription != nil {
		return *x.RemoteDescription
	}
	return ""
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetRemoteDescriptionVersion() uint64 {
	if x != nil && x.RemoteDescriptionVersion != nil {
		return *x.RemoteDescriptionVersion
	}
	return 0
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetSsrcsToAccountids() []*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping {
	if x != nil {
		return x.SsrcsToAccountids
	}
	return nil
}

type CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssrc      *uint32 `protobuf:"varint,1,opt,name=ssrc" json:"ssrc,omitempty"`
	Accountid *uint32 `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) Reset() {
	*x = CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) ProtoMessage() {}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{43}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) GetSsrc() uint32 {
	if x != nil && x.Ssrc != nil {
		return *x.Ssrc
	}
	return 0
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpWebrtcServer           *uint32 `protobuf:"varint,1,opt,name=ip_webrtc_server,json=ipWebrtcServer" json:"ip_webrtc_server,omitempty"`
	PortWebrtcServer         *uint32 `protobuf:"varint,2,opt,name=port_webrtc_server,json=portWebrtcServer" json:"port_webrtc_server,omitempty"`
	IpWebrtcSessionClient    *uint32 `protobuf:"varint,3,opt,name=ip_webrtc_session_client,json=ipWebrtcSessionClient" json:"ip_webrtc_session_client,omitempty"`
	PortWebrtcSessionClient  *uint32 `protobuf:"varint,4,opt,name=port_webrtc_session_client,json=portWebrtcSessionClient" json:"port_webrtc_session_client,omitempty"`
	RemoteDescriptionVersion *uint64 `protobuf:"varint,5,opt,name=remote_description_version,json=remoteDescriptionVersion" json:"remote_description_version,omitempty"`
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) Reset() {
	*x = CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) ProtoMessage() {}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{44}
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetIpWebrtcServer() uint32 {
	if x != nil && x.IpWebrtcServer != nil {
		return *x.IpWebrtcServer
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetPortWebrtcServer() uint32 {
	if x != nil && x.PortWebrtcServer != nil {
		return *x.PortWebrtcServer
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetIpWebrtcSessionClient() uint32 {
	if x != nil && x.IpWebrtcSessionClient != nil {
		return *x.IpWebrtcSessionClient
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetPortWebrtcSessionClient() uint32 {
	if x != nil && x.PortWebrtcSessionClient != nil {
		return *x.PortWebrtcSessionClient
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetRemoteDescriptionVersion() uint64 {
	if x != nil && x.RemoteDescriptionVersion != nil {
		return *x.RemoteDescriptionVersion
	}
	return 0
}

type CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) Reset() {
	*x = CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) ProtoMessage() {}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{45}
}

type CVoiceChat_RequestOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_RequestOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_RequestOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_RequestOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_RequestOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_RequestOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{46}
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_RequestOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_RequestOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_RequestOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_RequestOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_RequestOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_RequestOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{47}
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_OneOnOneChatRequested_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid    *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	SteamidPartner *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) Reset() {
	*x = CVoiceChat_OneOnOneChatRequested_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_OneOnOneChatRequested_Notification) ProtoMessage() {}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_OneOnOneChatRequested_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_OneOnOneChatRequested_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{48}
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_AnswerOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid     *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	SteamidPartner  *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	AcceptedRequest *bool   `protobuf:"varint,3,opt,name=accepted_request,json=acceptedRequest" json:"accepted_request,omitempty"`
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_AnswerOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AnswerOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AnswerOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AnswerOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{49}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetAcceptedRequest() bool {
	if x != nil && x.AcceptedRequest != nil {
		return *x.AcceptedRequest
	}
	return false
}

type CVoiceChat_AnswerOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_AnswerOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AnswerOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AnswerOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AnswerOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{50}
}

type CVoiceChat_OneOnOneChatRequestResponse_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoicechatId     *uint64 `protobuf:"fixed64,1,opt,name=voicechat_id,json=voicechatId" json:"voicechat_id,omitempty"`
	SteamidPartner  *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	AcceptedRequest *bool   `protobuf:"varint,3,opt,name=accepted_request,json=acceptedRequest" json:"accepted_request,omitempty"`
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) Reset() {
	*x = CVoiceChat_OneOnOneChatRequestResponse_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_OneOnOneChatRequestResponse_Notification) ProtoMessage() {}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_OneOnOneChatRequestResponse_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_OneOnOneChatRequestResponse_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{51}
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetVoicechatId() uint64 {
	if x != nil && x.VoicechatId != nil {
		return *x.VoicechatId
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetAcceptedRequest() bool {
	if x != nil && x.AcceptedRequest != nil {
		return *x.AcceptedRequest
	}
	return false
}

type CVoiceChat_EndOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_EndOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_EndOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_EndOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_EndOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_EndOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_EndOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_EndOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{52}
}

func (x *CVoiceChat_EndOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_EndOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_EndOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_EndOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_EndOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_EndOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_EndOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_EndOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_EndOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{53}
}

type CVoiceChat_LeaveOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	VoiceChatid    *uint64 `protobuf:"fixed64,2,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_LeaveOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{54}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_LeaveOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_LeaveOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{55}
}

type CVoiceChat_UserJoinedVoiceChat_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid           *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Chatid                *uint64 `protobuf:"varint,3,opt,name=chatid" json:"chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,4,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,5,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,6,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserSessionid         *uint32 `protobuf:"varint,7,opt,name=user_sessionid,json=userSessionid" json:"user_sessionid,omitempty"`
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) Reset() {
	*x = CVoiceChat_UserJoinedVoiceChat_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserJoinedVoiceChat_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserJoinedVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserJoinedVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{56}
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetUserSessionid() uint32 {
	if x != nil && x.UserSessionid != nil {
		return *x.UserSessionid
	}
	return 0
}

type CVoiceChat_UserVoiceStatus_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid            *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid            *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	UserMutedMicLocally    *bool   `protobuf:"varint,3,opt,name=user_muted_mic_locally,json=userMutedMicLocally" json:"user_muted_mic_locally,omitempty"`
	UserMutedOutputLocally *bool   `protobuf:"varint,4,opt,name=user_muted_output_locally,json=userMutedOutputLocally" json:"user_muted_output_locally,omitempty"`
	UserHasNoMicForSession *bool   `protobuf:"varint,5,opt,name=user_has_no_mic_for_session,json=userHasNoMicForSession" json:"user_has_no_mic_for_session,omitempty"`
	UserWebaudioSampleRate *int32  `protobuf:"varint,6,opt,name=user_webaudio_sample_rate,json=userWebaudioSampleRate" json:"user_webaudio_sample_rate,omitempty"`
}

func (x *CVoiceChat_UserVoiceStatus_Notification) Reset() {
	*x = CVoiceChat_UserVoiceStatus_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserVoiceStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserVoiceStatus_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserVoiceStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserVoiceStatus_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserVoiceStatus_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{57}
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserMutedMicLocally() bool {
	if x != nil && x.UserMutedMicLocally != nil {
		return *x.UserMutedMicLocally
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserMutedOutputLocally() bool {
	if x != nil && x.UserMutedOutputLocally != nil {
		return *x.UserMutedOutputLocally
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserHasNoMicForSession() bool {
	if x != nil && x.UserHasNoMicForSession != nil {
		return *x.UserHasNoMicForSession
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserWebaudioSampleRate() int32 {
	if x != nil && x.UserWebaudioSampleRate != nil {
		return *x.UserWebaudioSampleRate
	}
	return 0
}

type CVoiceChat_AllMembersStatus_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64                                    `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	Users       []*CVoiceChat_UserVoiceStatus_Notification `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (x *CVoiceChat_AllMembersStatus_Notification) Reset() {
	*x = CVoiceChat_AllMembersStatus_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AllMembersStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AllMembersStatus_Notification) ProtoMessage() {}

func (x *CVoiceChat_AllMembersStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AllMembersStatus_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AllMembersStatus_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{58}
}

func (x *CVoiceChat_AllMembersStatus_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_AllMembersStatus_Notification) GetUsers() []*CVoiceChat_UserVoiceStatus_Notification {
	if x != nil {
		return x.Users
	}
	return nil
}

type CVoiceChat_UpdateVoiceChatWebRTCData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid             *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	IpWebrtcServer          *uint32 `protobuf:"varint,2,opt,name=ip_webrtc_server,json=ipWebrtcServer" json:"ip_webrtc_server,omitempty"`
	PortWebrtcServer        *uint32 `protobuf:"varint,3,opt,name=port_webrtc_server,json=portWebrtcServer" json:"port_webrtc_server,omitempty"`
	IpWebrtcClient          *uint32 `protobuf:"varint,4,opt,name=ip_webrtc_client,json=ipWebrtcClient" json:"ip_webrtc_client,omitempty"`
	PortWebrtcClient        *uint32 `protobuf:"varint,5,opt,name=port_webrtc_client,json=portWebrtcClient" json:"port_webrtc_client,omitempty"`
	SsrcMySendingStream     *uint32 `protobuf:"varint,6,opt,name=ssrc_my_sending_stream,json=ssrcMySendingStream" json:"ssrc_my_sending_stream,omitempty"`
	UserAgent               *string `protobuf:"bytes,7,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	HasAudioWorkletsSupport *bool   `protobuf:"varint,8,opt,name=has_audio_worklets_support,json=hasAudioWorkletsSupport" json:"has_audio_worklets_support,omitempty"`
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) Reset() {
	*x = CVoiceChat_UpdateVoiceChatWebRTCData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateVoiceChatWebRTCData_Request) ProtoMessage() {}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateVoiceChatWebRTCData_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateVoiceChatWebRTCData_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{59}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetIpWebrtcServer() uint32 {
	if x != nil && x.IpWebrtcServer != nil {
		return *x.IpWebrtcServer
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetPortWebrtcServer() uint32 {
	if x != nil && x.PortWebrtcServer != nil {
		return *x.PortWebrtcServer
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetIpWebrtcClient() uint32 {
	if x != nil && x.IpWebrtcClient != nil {
		return *x.IpWebrtcClient
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetPortWebrtcClient() uint32 {
	if x != nil && x.PortWebrtcClient != nil {
		return *x.PortWebrtcClient
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetSsrcMySendingStream() uint32 {
	if x != nil && x.SsrcMySendingStream != nil {
		return *x.SsrcMySendingStream
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetHasAudioWorkletsSupport() bool {
	if x != nil && x.HasAudioWorkletsSupport != nil {
		return *x.HasAudioWorkletsSupport
	}
	return false
}

type CVoiceChat_UpdateVoiceChatWebRTCData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendClientVoiceLogs *bool `protobuf:"varint,1,opt,name=send_client_voice_logs,json=sendClientVoiceLogs" json:"send_client_voice_logs,omitempty"`
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) Reset() {
	*x = CVoiceChat_UpdateVoiceChatWebRTCData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateVoiceChatWebRTCData_Response) ProtoMessage() {}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateVoiceChatWebRTCData_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateVoiceChatWebRTCData_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{60}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) GetSendClientVoiceLogs() bool {
	if x != nil && x.SendClientVoiceLogs != nil {
		return *x.SendClientVoiceLogs
	}
	return false
}

type CVoiceChat_UploadClientVoiceChatLogs_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid             *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	ClientVoiceLogsNewLines *string `protobuf:"bytes,2,opt,name=client_voice_logs_new_lines,json=clientVoiceLogsNewLines" json:"client_voice_logs_new_lines,omitempty"`
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) Reset() {
	*x = CVoiceChat_UploadClientVoiceChatLogs_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UploadClientVoiceChatLogs_Request) ProtoMessage() {}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UploadClientVoiceChatLogs_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UploadClientVoiceChatLogs_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{61}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) GetClientVoiceLogsNewLines() string {
	if x != nil && x.ClientVoiceLogsNewLines != nil {
		return *x.ClientVoiceLogsNewLines
	}
	return ""
}

type CVoiceChat_UploadClientVoiceChatLogs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) Reset() {
	*x = CVoiceChat_UploadClientVoiceChatLogs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UploadClientVoiceChatLogs_Response) ProtoMessage() {}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UploadClientVoiceChatLogs_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UploadClientVoiceChatLogs_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{62}
}

type CVoiceChat_LeaveVoiceChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_LeaveVoiceChat_Response) Reset() {
	*x = CVoiceChat_LeaveVoiceChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveVoiceChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveVoiceChat_Response) ProtoMessage() {}

func (x *CVoiceChat_LeaveVoiceChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveVoiceChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveVoiceChat_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{63}
}

type CVoiceChat_UserLeftVoiceChat_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid           *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Chatid                *uint64 `protobuf:"varint,3,opt,name=chatid" json:"chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,4,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,5,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,6,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserSessionid         *uint32 `protobuf:"varint,7,opt,name=user_sessionid,json=userSessionid" json:"user_sessionid,omitempty"`
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) Reset() {
	*x = CVoiceChat_UserLeftVoiceChat_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserLeftVoiceChat_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserLeftVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserLeftVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{64}
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetUserSessionid() uint32 {
	if x != nil && x.UserSessionid != nil {
		return *x.UserSessionid
	}
	return 0
}

type CVoiceChat_VoiceChatEnded_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,2,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,3,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	Chatid                *uint64 `protobuf:"varint,4,opt,name=chatid" json:"chatid,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,5,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CVoiceChat_VoiceChatEnded_Notification) Reset() {
	*x = CVoiceChat_VoiceChatEnded_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_VoiceChatEnded_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_VoiceChatEnded_Notification) ProtoMessage() {}

func (x *CVoiceChat_VoiceChatEnded_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_VoiceChatEnded_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_VoiceChatEnded_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{65}
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CSteamTV_CreateBroadcastChannel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_CreateBroadcastChannel_Response) Reset() {
	*x = CSteamTV_CreateBroadcastChannel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_CreateBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_CreateBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_CreateBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_CreateBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_CreateBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{66}
}

func (x *CSteamTV_CreateBroadcastChannel_Response) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelID_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	UniqueName         *string `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	Steamid            *uint64 `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelID_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelID_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelID_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelID_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelID_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelID_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelID_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{67}
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CSteamTV_SetBroadcastChannelProfile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelProfile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelProfile_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelProfile_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelProfile_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{68}
}

type CSteamTV_GetBroadcastChannelProfile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueName   *string `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	OwnerSteamid *uint64 `protobuf:"fixed64,2,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	Name         *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Language     *string `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Headline     *string `protobuf:"bytes,5,opt,name=headline" json:"headline,omitempty"`
	Summary      *string `protobuf:"bytes,6,opt,name=summary" json:"summary,omitempty"`
	Schedule     *string `protobuf:"bytes,7,opt,name=schedule" json:"schedule,omitempty"`
	Rules        *string `protobuf:"bytes,8,opt,name=rules" json:"rules,omitempty"`
	Panels       *string `protobuf:"bytes,9,opt,name=panels" json:"panels,omitempty"`
	IsPartnered  *bool   `protobuf:"varint,10,opt,name=is_partnered,json=isPartnered" json:"is_partnered,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelProfile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelProfile_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelProfile_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelProfile_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{69}
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetRules() string {
	if x != nil && x.Rules != nil {
		return *x.Rules
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetPanels() string {
	if x != nil && x.Panels != nil {
		return *x.Panels
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetIsPartnered() bool {
	if x != nil && x.IsPartnered != nil {
		return *x.IsPartnered
	}
	return false
}

type CSteamTV_SetBroadcastChannelImage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplaceImageHash *string `protobuf:"bytes,1,opt,name=replace_image_hash,json=replaceImageHash" json:"replace_image_hash,omitempty"`
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelImage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelImage_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelImage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelImage_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelImage_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{70}
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) GetReplaceImageHash() string {
	if x != nil && x.ReplaceImageHash != nil {
		return *x.ReplaceImageHash
	}
	return ""
}

type CSteamTV_GetBroadcastChannelImages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*CSteamTV_GetBroadcastChannelImages_Response_Images `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelImages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelImages_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelImages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelImages_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelImages_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{71}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) GetImages() []*CSteamTV_GetBroadcastChannelImages_Response_Images {
	if x != nil {
		return x.Images
	}
	return nil
}

type CSteamTV_GetBroadcastChannelImages_Response_Images struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageType  *int32  `protobuf:"varint,1,opt,name=image_type,json=imageType" json:"image_type,omitempty"`
	ImagePath  *string `protobuf:"bytes,2,opt,name=image_path,json=imagePath" json:"image_path,omitempty"`
	ImageIndex *uint32 `protobuf:"varint,3,opt,name=image_index,json=imageIndex" json:"image_index,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) Reset() {
	*x = CSteamTV_GetBroadcastChannelImages_Response_Images{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelImages_Response_Images) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelImages_Response_Images.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelImages_Response_Images) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{72}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImageType() int32 {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImagePath() string {
	if x != nil && x.ImagePath != nil {
		return *x.ImagePath
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImageIndex() uint32 {
	if x != nil && x.ImageIndex != nil {
		return *x.ImageIndex
	}
	return 0
}

type CSteamTV_GetBroadcastChannelLinks_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*CSteamTV_GetBroadcastChannelLinks_Response_Links `protobuf:"bytes,1,rep,name=links" json:"links,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelLinks_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelLinks_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelLinks_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelLinks_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{73}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) GetLinks() []*CSteamTV_GetBroadcastChannelLinks_Response_Links {
	if x != nil {
		return x.Links
	}
	return nil
}

type CSteamTV_GetBroadcastChannelLinks_Response_Links struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkIndex       *uint32 `protobuf:"varint,1,opt,name=link_index,json=linkIndex" json:"link_index,omitempty"`
	Url             *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	LinkDescription *string `protobuf:"bytes,3,opt,name=link_description,json=linkDescription" json:"link_description,omitempty"`
	Left            *uint32 `protobuf:"varint,4,opt,name=left" json:"left,omitempty"`
	Top             *uint32 `protobuf:"varint,5,opt,name=top" json:"top,omitempty"`
	Width           *uint32 `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	Height          *uint32 `protobuf:"varint,7,opt,name=height" json:"height,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) Reset() {
	*x = CSteamTV_GetBroadcastChannelLinks_Response_Links{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelLinks_Response_Links) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelLinks_Response_Links.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelLinks_Response_Links) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{74}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLinkIndex() uint32 {
	if x != nil && x.LinkIndex != nil {
		return *x.LinkIndex
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLinkDescription() string {
	if x != nil && x.LinkDescription != nil {
		return *x.LinkDescription
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLeft() uint32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CSteamTV_SetBroadcastChannelLinkRegions_Request_Links struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkIndex       *uint32 `protobuf:"varint,1,opt,name=link_index,json=linkIndex" json:"link_index,omitempty"`
	Url             *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	LinkDescription *string `protobuf:"bytes,3,opt,name=link_description,json=linkDescription" json:"link_description,omitempty"`
	Left            *uint32 `protobuf:"varint,4,opt,name=left" json:"left,omitempty"`
	Top             *uint32 `protobuf:"varint,5,opt,name=top" json:"top,omitempty"`
	Width           *uint32 `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	Height          *uint32 `protobuf:"varint,7,opt,name=height" json:"height,omitempty"`
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) Reset() {
	*x = CSteamTV_SetBroadcastChannelLinkRegions_Request_Links{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{75}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLinkIndex() uint32 {
	if x != nil && x.LinkIndex != nil {
		return *x.LinkIndex
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLinkDescription() string {
	if x != nil && x.LinkDescription != nil {
		return *x.LinkDescription
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLeft() uint32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CSteamTV_SetBroadcastChannelLinkRegions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelLinkRegions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelLinkRegions_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelLinkRegions_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelLinkRegions_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{76}
}

type CSteamTV_GetBroadcastChannelStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLive             *bool   `protobuf:"varint,1,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	IsDisabled         *bool   `protobuf:"varint,2,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	Appid              *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	Viewers            *uint64 `protobuf:"varint,4,opt,name=viewers" json:"viewers,omitempty"`
	Views              *uint64 `protobuf:"varint,5,opt,name=views" json:"views,omitempty"`
	BroadcasterSteamid *uint64 `protobuf:"fixed64,6,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	ThumbnailUrl       *string `protobuf:"bytes,7,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Followers          *uint64 `protobuf:"varint,8,opt,name=followers" json:"followers,omitempty"`
	Subscribers        *uint64 `protobuf:"varint,9,opt,name=subscribers" json:"subscribers,omitempty"`
	UniqueName         *string `protobuf:"bytes,10,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	BroadcastSessionId *uint64 `protobuf:"varint,11,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelStatus_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelStatus_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelStatus_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{77}
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetViews() uint64 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetFollowers() uint64 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetSubscribers() uint64 {
	if x != nil && x.Subscribers != nil {
		return *x.Subscribers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

type GetBroadcastChannelEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	UniqueName         *string `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	Name               *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Appid              *uint32 `protobuf:"varint,4,opt,name=appid" json:"appid,omitempty"`
	Viewers            *uint64 `protobuf:"varint,5,opt,name=viewers" json:"viewers,omitempty"`
	Views              *uint64 `protobuf:"varint,6,opt,name=views" json:"views,omitempty"`
	ThumbnailUrl       *string `protobuf:"bytes,7,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Followers          *uint64 `protobuf:"varint,8,opt,name=followers" json:"followers,omitempty"`
	Headline           *string `protobuf:"bytes,9,opt,name=headline" json:"headline,omitempty"`
	AvatarUrl          *string `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	BroadcasterSteamid *uint64 `protobuf:"fixed64,11,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	Subscribers        *uint64 `protobuf:"varint,12,opt,name=subscribers" json:"subscribers,omitempty"`
	BackgroundUrl      *string `protobuf:"bytes,13,opt,name=background_url,json=backgroundUrl" json:"background_url,omitempty"`
	IsFeatured         *bool   `protobuf:"varint,14,opt,name=is_featured,json=isFeatured" json:"is_featured,omitempty"`
	IsDisabled         *bool   `protobuf:"varint,15,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	IsLive             *bool   `protobuf:"varint,16,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	Language           *string `protobuf:"bytes,17,opt,name=language" json:"language,omitempty"`
	Reports            *uint32 `protobuf:"varint,18,opt,name=reports" json:"reports,omitempty"`
	IsPartnered        *bool   `protobuf:"varint,19,opt,name=is_partnered,json=isPartnered" json:"is_partnered,omitempty"`
}

func (x *GetBroadcastChannelEntry) Reset() {
	*x = GetBroadcastChannelEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBroadcastChannelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBroadcastChannelEntry) ProtoMessage() {}

func (x *GetBroadcastChannelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBroadcastChannelEntry.ProtoReflect.Descriptor instead.
func (*GetBroadcastChannelEntry) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{78}
}

func (x *GetBroadcastChannelEntry) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetViews() uint64 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetFollowers() uint64 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetSubscribers() uint64 {
	if x != nil && x.Subscribers != nil {
		return *x.Subscribers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetBackgroundUrl() string {
	if x != nil && x.BackgroundUrl != nil {
		return *x.BackgroundUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetIsFeatured() bool {
	if x != nil && x.IsFeatured != nil {
		return *x.IsFeatured
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetReports() uint32 {
	if x != nil && x.Reports != nil {
		return *x.Reports
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetIsPartnered() bool {
	if x != nil && x.IsPartnered != nil {
		return *x.IsPartnered
	}
	return false
}

type CSteamTV_GetFollowedChannels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetFollowedChannels_Response) Reset() {
	*x = CSteamTV_GetFollowedChannels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetFollowedChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetFollowedChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetFollowedChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetFollowedChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetFollowedChannels_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{79}
}

func (x *CSteamTV_GetFollowedChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetSubscribedChannels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetSubscribedChannels_Response) Reset() {
	*x = CSteamTV_GetSubscribedChannels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetSubscribedChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSubscribedChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetSubscribedChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSubscribedChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSubscribedChannels_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{80}
}

func (x *CSteamTV_GetSubscribedChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_FollowBroadcastChannel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFollowed *bool `protobuf:"varint,1,opt,name=is_followed,json=isFollowed" json:"is_followed,omitempty"`
}

func (x *CSteamTV_FollowBroadcastChannel_Response) Reset() {
	*x = CSteamTV_FollowBroadcastChannel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_FollowBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_FollowBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_FollowBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_FollowBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_FollowBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{81}
}

func (x *CSteamTV_FollowBroadcastChannel_Response) GetIsFollowed() bool {
	if x != nil && x.IsFollowed != nil {
		return *x.IsFollowed
	}
	return false
}

type CSteamTV_SubscribeBroadcastChannel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSubscribed *bool `protobuf:"varint,1,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) Reset() {
	*x = CSteamTV_SubscribeBroadcastChannel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SubscribeBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SubscribeBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SubscribeBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{82}
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

type CSteamTV_ReportBroadcastChannel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_ReportBroadcastChannel_Response) Reset() {
	*x = CSteamTV_ReportBroadcastChannel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_ReportBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ReportBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_ReportBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ReportBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_ReportBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{83}
}

type CSteamTV_GetBroadcastChannelInteraction_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFollowed   *bool `protobuf:"varint,1,opt,name=is_followed,json=isFollowed" json:"is_followed,omitempty"`
	IsSubscribed *bool `protobuf:"varint,2,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelInteraction_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelInteraction_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelInteraction_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelInteraction_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{84}
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) GetIsFollowed() bool {
	if x != nil && x.IsFollowed != nil {
		return *x.IsFollowed
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

type CSteamTV_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32                     `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name        *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image       *string                     `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Viewers     *uint64                     `protobuf:"varint,4,opt,name=viewers" json:"viewers,omitempty"`
	Channels    []*GetBroadcastChannelEntry `protobuf:"bytes,5,rep,name=channels" json:"channels,omitempty"`
	ReleaseDate *string                     `protobuf:"bytes,6,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	Developer   *string                     `protobuf:"bytes,7,opt,name=developer" json:"developer,omitempty"`
	Publisher   *string                     `protobuf:"bytes,8,opt,name=publisher" json:"publisher,omitempty"`
}

func (x *CSteamTV_Game) Reset() {
	*x = CSteamTV_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_Game) ProtoMessage() {}

func (x *CSteamTV_Game) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_Game.ProtoReflect.Descriptor instead.
func (*CSteamTV_Game) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{85}
}

func (x *CSteamTV_Game) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_Game) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_Game) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CSteamTV_Game) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *CSteamTV_Game) GetChannels() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *CSteamTV_Game) GetReleaseDate() string {
	if x != nil && x.ReleaseDate != nil {
		return *x.ReleaseDate
	}
	return ""
}

func (x *CSteamTV_Game) GetDeveloper() string {
	if x != nil && x.Developer != nil {
		return *x.Developer
	}
	return ""
}

func (x *CSteamTV_Game) GetPublisher() string {
	if x != nil && x.Publisher != nil {
		return *x.Publisher
	}
	return ""
}

type CSteamTV_GetGames_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CSteamTV_Game `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetGames_Response) Reset() {
	*x = CSteamTV_GetGames_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetGames_Response) ProtoMessage() {}

func (x *CSteamTV_GetGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetGames_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetGames_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{86}
}

func (x *CSteamTV_GetGames_Response) GetResults() []*CSteamTV_Game {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetChannels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetChannels_Response) Reset() {
	*x = CSteamTV_GetChannels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChannels_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{87}
}

func (x *CSteamTV_GetChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetBroadcastChannelBroadcasters_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasters []*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster `protobuf:"bytes,1,rep,name=broadcasters" json:"broadcasters,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelBroadcasters_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelBroadcasters_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelBroadcasters_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelBroadcasters_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{88}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) GetBroadcasters() []*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster {
	if x != nil {
		return x.Broadcasters
	}
	return nil
}

type CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid   *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	RtmpToken *string `protobuf:"bytes,3,opt,name=rtmp_token,json=rtmpToken" json:"rtmp_token,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) Reset() {
	*x = CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{89}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetRtmpToken() string {
	if x != nil && x.RtmpToken != nil {
		return *x.RtmpToken
	}
	return ""
}

type CSteamTV_ChatBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuerSteamid  *uint64 `protobuf:"fixed64,1,opt,name=issuer_steamid,json=issuerSteamid" json:"issuer_steamid,omitempty"`
	ChatterSteamid *uint64 `protobuf:"fixed64,2,opt,name=chatter_steamid,json=chatterSteamid" json:"chatter_steamid,omitempty"`
	TimeExpires    *string `protobuf:"bytes,3,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	Permanent      *bool   `protobuf:"varint,4,opt,name=permanent" json:"permanent,omitempty"`
	Name           *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (x *CSteamTV_ChatBan) Reset() {
	*x = CSteamTV_ChatBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_ChatBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ChatBan) ProtoMessage() {}

func (x *CSteamTV_ChatBan) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ChatBan.ProtoReflect.Descriptor instead.
func (*CSteamTV_ChatBan) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{90}
}

func (x *CSteamTV_ChatBan) GetIssuerSteamid() uint64 {
	if x != nil && x.IssuerSteamid != nil {
		return *x.IssuerSteamid
	}
	return 0
}

func (x *CSteamTV_ChatBan) GetChatterSteamid() uint64 {
	if x != nil && x.ChatterSteamid != nil {
		return *x.ChatterSteamid
	}
	return 0
}

func (x *CSteamTV_ChatBan) GetTimeExpires() string {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return ""
}

func (x *CSteamTV_ChatBan) GetPermanent() bool {
	if x != nil && x.Permanent != nil {
		return *x.Permanent
	}
	return false
}

func (x *CSteamTV_ChatBan) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CSteamTV_AddChatBan_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ChatterSteamid     *uint64 `protobuf:"fixed64,2,opt,name=chatter_steamid,json=chatterSteamid" json:"chatter_steamid,omitempty"`
	Duration           *uint32 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	Permanent          *bool   `protobuf:"varint,4,opt,name=permanent" json:"permanent,omitempty"`
	Undo               *bool   `protobuf:"varint,5,opt,name=undo" json:"undo,omitempty"`
}

func (x *CSteamTV_AddChatBan_Request) Reset() {
	*x = CSteamTV_AddChatBan_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddChatBan_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatBan_Request) ProtoMessage() {}

func (x *CSteamTV_AddChatBan_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatBan_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatBan_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{91}
}

func (x *CSteamTV_AddChatBan_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetChatterSteamid() uint64 {
	if x != nil && x.ChatterSteamid != nil {
		return *x.ChatterSteamid
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetPermanent() bool {
	if x != nil && x.Permanent != nil {
		return *x.Permanent
	}
	return false
}

func (x *CSteamTV_AddChatBan_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_AddChatBan_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_AddChatBan_Response) Reset() {
	*x = CSteamTV_AddChatBan_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddChatBan_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatBan_Response) ProtoMessage() {}

func (x *CSteamTV_AddChatBan_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatBan_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatBan_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{92}
}

type CSteamTV_GetChatBans_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CSteamTV_ChatBan `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetChatBans_Response) Reset() {
	*x = CSteamTV_GetChatBans_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChatBans_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatBans_Response) ProtoMessage() {}

func (x *CSteamTV_GetChatBans_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatBans_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatBans_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{93}
}

func (x *CSteamTV_GetChatBans_Response) GetResults() []*CSteamTV_ChatBan {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_AddChatModerator_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ModeratorSteamid   *uint64 `protobuf:"fixed64,2,opt,name=moderator_steamid,json=moderatorSteamid" json:"moderator_steamid,omitempty"`
	Undo               *bool   `protobuf:"varint,3,opt,name=undo" json:"undo,omitempty"`
}

func (x *CSteamTV_AddChatModerator_Request) Reset() {
	*x = CSteamTV_AddChatModerator_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddChatModerator_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatModerator_Request) ProtoMessage() {}

func (x *CSteamTV_AddChatModerator_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatModerator_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatModerator_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{94}
}

func (x *CSteamTV_AddChatModerator_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_AddChatModerator_Request) GetModeratorSteamid() uint64 {
	if x != nil && x.ModeratorSteamid != nil {
		return *x.ModeratorSteamid
	}
	return 0
}

func (x *CSteamTV_AddChatModerator_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_AddChatModerator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_AddChatModerator_Response) Reset() {
	*x = CSteamTV_AddChatModerator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddChatModerator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatModerator_Response) ProtoMessage() {}

func (x *CSteamTV_AddChatModerator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatModerator_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatModerator_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{95}
}

type CSteamTV_GetChatModerators_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetChatModerators_Request) Reset() {
	*x = CSteamTV_GetChatModerators_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChatModerators_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatModerators_Request) ProtoMessage() {}

func (x *CSteamTV_GetChatModerators_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatModerators_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatModerators_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{96}
}

func (x *CSteamTV_GetChatModerators_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_ChatModerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CSteamTV_ChatModerator) Reset() {
	*x = CSteamTV_ChatModerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_ChatModerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ChatModerator) ProtoMessage() {}

func (x *CSteamTV_ChatModerator) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ChatModerator.ProtoReflect.Descriptor instead.
func (*CSteamTV_ChatModerator) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{97}
}

func (x *CSteamTV_ChatModerator) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSteamTV_ChatModerator) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CSteamTV_GetChatModerators_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CSteamTV_ChatModerator `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetChatModerators_Response) Reset() {
	*x = CSteamTV_GetChatModerators_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChatModerators_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatModerators_Response) ProtoMessage() {}

func (x *CSteamTV_GetChatModerators_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatModerators_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatModerators_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{98}
}

func (x *CSteamTV_GetChatModerators_Response) GetResults() []*CSteamTV_ChatModerator {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_AddWordBan_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_AddWordBan_Response) Reset() {
	*x = CSteamTV_AddWordBan_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddWordBan_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddWordBan_Response) ProtoMessage() {}

func (x *CSteamTV_AddWordBan_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddWordBan_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddWordBan_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{99}
}

type CSteamTV_GetWordBans_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetWordBans_Response) Reset() {
	*x = CSteamTV_GetWordBans_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetWordBans_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetWordBans_Response) ProtoMessage() {}

func (x *CSteamTV_GetWordBans_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetWordBans_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetWordBans_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{100}
}

func (x *CSteamTV_GetWordBans_Response) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_JoinChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_JoinChat_Request) Reset() {
	*x = CSteamTV_JoinChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_JoinChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_JoinChat_Request) ProtoMessage() {}

func (x *CSteamTV_JoinChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_JoinChat_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_JoinChat_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{101}
}

func (x *CSteamTV_JoinChat_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_JoinChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId          *uint64  `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ViewUrlTemplate *string  `protobuf:"bytes,2,opt,name=view_url_template,json=viewUrlTemplate" json:"view_url_template,omitempty"`
	FlairGroupIds   []uint64 `protobuf:"varint,3,rep,name=flair_group_ids,json=flairGroupIds" json:"flair_group_ids,omitempty"`
}

func (x *CSteamTV_JoinChat_Response) Reset() {
	*x = CSteamTV_JoinChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_JoinChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_JoinChat_Response) ProtoMessage() {}

func (x *CSteamTV_JoinChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_JoinChat_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_JoinChat_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{102}
}

func (x *CSteamTV_JoinChat_Response) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CSteamTV_JoinChat_Response) GetViewUrlTemplate() string {
	if x != nil && x.ViewUrlTemplate != nil {
		return *x.ViewUrlTemplate
	}
	return ""
}

func (x *CSteamTV_JoinChat_Response) GetFlairGroupIds() []uint64 {
	if x != nil {
		return x.FlairGroupIds
	}
	return nil
}

type CSteamTV_Search_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_Search_Response) Reset() {
	*x = CSteamTV_Search_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_Search_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_Search_Response) ProtoMessage() {}

func (x *CSteamTV_Search_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_Search_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_Search_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{103}
}

func (x *CSteamTV_Search_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetSteamTVUserSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamLiveEmail        *bool `protobuf:"varint,1,opt,name=stream_live_email,json=streamLiveEmail" json:"stream_live_email,omitempty"`
	StreamLiveNotification *bool `protobuf:"varint,2,opt,name=stream_live_notification,json=streamLiveNotification" json:"stream_live_notification,omitempty"`
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) Reset() {
	*x = CSteamTV_GetSteamTVUserSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSteamTVUserSettings_Response) ProtoMessage() {}

func (x *CSteamTV_GetSteamTVUserSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSteamTVUserSettings_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSteamTVUserSettings_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{104}
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) GetStreamLiveEmail() bool {
	if x != nil && x.StreamLiveEmail != nil {
		return *x.StreamLiveEmail
	}
	return false
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) GetStreamLiveNotification() bool {
	if x != nil && x.StreamLiveNotification != nil {
		return *x.StreamLiveNotification
	}
	return false
}

type CSteamTV_SetSteamTVUserSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_SetSteamTVUserSettings_Response) Reset() {
	*x = CSteamTV_SetSteamTVUserSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetSteamTVUserSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetSteamTVUserSettings_Response) ProtoMessage() {}

func (x *CSteamTV_SetSteamTVUserSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetSteamTVUserSettings_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetSteamTVUserSettings_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{105}
}

type CSteamTV_GetMyBroadcastChannels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) Reset() {
	*x = CSteamTV_GetMyBroadcastChannels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetMyBroadcastChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetMyBroadcastChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetMyBroadcastChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetMyBroadcastChannels_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{106}
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_HomePageTemplate_Takeover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasts []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_Takeover) Reset() {
	*x = CSteamTV_HomePageTemplate_Takeover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_Takeover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Takeover) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Takeover) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Takeover.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Takeover) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{107}
}

func (x *CSteamTV_HomePageTemplate_Takeover) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

type CSteamTV_HomePageTemplate_SingleGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasts []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Appid      *uint32                     `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Title      *string                     `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_SingleGame) Reset() {
	*x = CSteamTV_HomePageTemplate_SingleGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_SingleGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_SingleGame) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_SingleGame) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_SingleGame.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_SingleGame) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{108}
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type GameListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid     *uint32                   `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	GameName  *string                   `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	Broadcast *GetBroadcastChannelEntry `protobuf:"bytes,3,opt,name=broadcast" json:"broadcast,omitempty"`
}

func (x *GameListEntry) Reset() {
	*x = GameListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListEntry) ProtoMessage() {}

func (x *GameListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListEntry.ProtoReflect.Descriptor instead.
func (*GameListEntry) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{109}
}

func (x *GameListEntry) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *GameListEntry) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *GameListEntry) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

type CSteamTV_HomePageTemplate_GameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*GameListEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Title   *string          `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_GameList) Reset() {
	*x = CSteamTV_HomePageTemplate_GameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_GameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_GameList) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_GameList) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_GameList.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_GameList) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{110}
}

func (x *CSteamTV_HomePageTemplate_GameList) GetEntries() []*GameListEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_GameList) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_QuickExplore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasts []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Title      *string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) Reset() {
	*x = CSteamTV_HomePageTemplate_QuickExplore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_QuickExplore) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_QuickExplore) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_QuickExplore.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_QuickExplore) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{111}
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_ConveyorBelt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasts []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Title      *string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) Reset() {
	*x = CSteamTV_HomePageTemplate_ConveyorBelt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_ConveyorBelt) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_ConveyorBelt.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_ConveyorBelt) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{112}
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_WatchParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast   *GetBroadcastChannelEntry `protobuf:"bytes,1,opt,name=broadcast" json:"broadcast,omitempty"`
	Title       *string                   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ChatGroupId *uint64                   `protobuf:"varint,3,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_WatchParty) Reset() {
	*x = CSteamTV_HomePageTemplate_WatchParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_WatchParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_WatchParty) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_WatchParty) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_WatchParty.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_WatchParty) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{113}
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CSteamTV_HomePageTemplate_Developer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast *GetBroadcastChannelEntry `protobuf:"bytes,1,opt,name=broadcast" json:"broadcast,omitempty"`
	Title     *string                   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_Developer) Reset() {
	*x = CSteamTV_HomePageTemplate_Developer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_Developer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Developer) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Developer) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Developer.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Developer) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{114}
}

func (x *CSteamTV_HomePageTemplate_Developer) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_Developer) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_Event) Reset() {
	*x = CSteamTV_HomePageTemplate_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Event) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Event) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Event.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Event) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{115}
}

func (x *CSteamTV_HomePageTemplate_Event) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageContentRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateType *int32                                  `protobuf:"varint,1,opt,name=template_type,json=templateType" json:"template_type,omitempty"`
	Takeover     *CSteamTV_HomePageTemplate_Takeover     `protobuf:"bytes,2,opt,name=takeover" json:"takeover,omitempty"`
	SingleGame   *CSteamTV_HomePageTemplate_SingleGame   `protobuf:"bytes,3,opt,name=single_game,json=singleGame" json:"single_game,omitempty"`
	GameList     *CSteamTV_HomePageTemplate_GameList     `protobuf:"bytes,4,opt,name=game_list,json=gameList" json:"game_list,omitempty"`
	QuickExplore *CSteamTV_HomePageTemplate_QuickExplore `protobuf:"bytes,5,opt,name=quick_explore,json=quickExplore" json:"quick_explore,omitempty"`
	ConveyorBelt *CSteamTV_HomePageTemplate_ConveyorBelt `protobuf:"bytes,6,opt,name=conveyor_belt,json=conveyorBelt" json:"conveyor_belt,omitempty"`
	WatchParty   *CSteamTV_HomePageTemplate_WatchParty   `protobuf:"bytes,7,opt,name=watch_party,json=watchParty" json:"watch_party,omitempty"`
	Developer    *CSteamTV_HomePageTemplate_Developer    `protobuf:"bytes,8,opt,name=developer" json:"developer,omitempty"`
	Event        *CSteamTV_HomePageTemplate_Event        `protobuf:"bytes,9,opt,name=event" json:"event,omitempty"`
}

func (x *CSteamTV_HomePageContentRow) Reset() {
	*x = CSteamTV_HomePageContentRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageContentRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageContentRow) ProtoMessage() {}

func (x *CSteamTV_HomePageContentRow) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageContentRow.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageContentRow) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{116}
}

func (x *CSteamTV_HomePageContentRow) GetTemplateType() int32 {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return 0
}

func (x *CSteamTV_HomePageContentRow) GetTakeover() *CSteamTV_HomePageTemplate_Takeover {
	if x != nil {
		return x.Takeover
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetSingleGame() *CSteamTV_HomePageTemplate_SingleGame {
	if x != nil {
		return x.SingleGame
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetGameList() *CSteamTV_HomePageTemplate_GameList {
	if x != nil {
		return x.GameList
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetQuickExplore() *CSteamTV_HomePageTemplate_QuickExplore {
	if x != nil {
		return x.QuickExplore
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetConveyorBelt() *CSteamTV_HomePageTemplate_ConveyorBelt {
	if x != nil {
		return x.ConveyorBelt
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetWatchParty() *CSteamTV_HomePageTemplate_WatchParty {
	if x != nil {
		return x.WatchParty
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetDeveloper() *CSteamTV_HomePageTemplate_Developer {
	if x != nil {
		return x.Developer
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetEvent() *CSteamTV_HomePageTemplate_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type CSteamTV_GetHomePageContents_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*CSteamTV_HomePageContentRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
}

func (x *CSteamTV_GetHomePageContents_Response) Reset() {
	*x = CSteamTV_GetHomePageContents_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetHomePageContents_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetHomePageContents_Response) ProtoMessage() {}

func (x *CSteamTV_GetHomePageContents_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetHomePageContents_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetHomePageContents_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{117}
}

func (x *CSteamTV_GetHomePageContents_Response) GetRows() []*CSteamTV_HomePageContentRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type CSteamTV_BroadcastClipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastClipId    *uint64 `protobuf:"varint,1,opt,name=broadcast_clip_id,json=broadcastClipId" json:"broadcast_clip_id,omitempty"`
	ChannelId          *uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AppId              *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	BroadcasterSteamid *uint64 `protobuf:"fixed64,4,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	CreatorSteamid     *uint64 `protobuf:"fixed64,5,opt,name=creator_steamid,json=creatorSteamid" json:"creator_steamid,omitempty"`
	VideoDescription   *string `protobuf:"bytes,6,opt,name=video_description,json=videoDescription" json:"video_description,omitempty"`
	LiveTime           *uint32 `protobuf:"varint,7,opt,name=live_time,json=liveTime" json:"live_time,omitempty"`
	LengthMs           *uint32 `protobuf:"varint,8,opt,name=length_ms,json=lengthMs" json:"length_ms,omitempty"`
	ThumbnailPath      *string `protobuf:"bytes,9,opt,name=thumbnail_path,json=thumbnailPath" json:"thumbnail_path,omitempty"`
}

func (x *CSteamTV_BroadcastClipInfo) Reset() {
	*x = CSteamTV_BroadcastClipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_BroadcastClipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_BroadcastClipInfo) ProtoMessage() {}

func (x *CSteamTV_BroadcastClipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_BroadcastClipInfo.ProtoReflect.Descriptor instead.
func (*CSteamTV_BroadcastClipInfo) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{118}
}

func (x *CSteamTV_BroadcastClipInfo) GetBroadcastClipId() uint64 {
	if x != nil && x.BroadcastClipId != nil {
		return *x.BroadcastClipId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetCreatorSteamid() uint64 {
	if x != nil && x.CreatorSteamid != nil {
		return *x.CreatorSteamid
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetVideoDescription() string {
	if x != nil && x.VideoDescription != nil {
		return *x.VideoDescription
	}
	return ""
}

func (x *CSteamTV_BroadcastClipInfo) GetLiveTime() uint32 {
	if x != nil && x.LiveTime != nil {
		return *x.LiveTime
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetLengthMs() uint32 {
	if x != nil && x.LengthMs != nil {
		return *x.LengthMs
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetThumbnailPath() string {
	if x != nil && x.ThumbnailPath != nil {
		return *x.ThumbnailPath
	}
	return ""
}

type CSteamTV_GetBroadcastChannelClips_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clips         []*CSteamTV_BroadcastClipInfo `protobuf:"bytes,1,rep,name=clips" json:"clips,omitempty"`
	ThumbnailHost *string                       `protobuf:"bytes,2,opt,name=thumbnail_host,json=thumbnailHost" json:"thumbnail_host,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelClips_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelClips_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelClips_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelClips_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelClips_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{119}
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) GetClips() []*CSteamTV_BroadcastClipInfo {
	if x != nil {
		return x.Clips
	}
	return nil
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) GetThumbnailHost() string {
	if x != nil && x.ThumbnailHost != nil {
		return *x.ThumbnailHost
	}
	return ""
}

type CFriendsListCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupid          *uint32  `protobuf:"varint,1,opt,name=groupid" json:"groupid,omitempty"`
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AccountidMembers []uint32 `protobuf:"varint,3,rep,name=accountid_members,json=accountidMembers" json:"accountid_members,omitempty"`
}

func (x *CFriendsListCategory) Reset() {
	*x = CFriendsListCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsListCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsListCategory) ProtoMessage() {}

func (x *CFriendsListCategory) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsListCategory.ProtoReflect.Descriptor instead.
func (*CFriendsListCategory) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{120}
}

func (x *CFriendsListCategory) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *CFriendsListCategory) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CFriendsListCategory) GetAccountidMembers() []uint32 {
	if x != nil {
		return x.AccountidMembers
	}
	return nil
}

type CFriendsList_GetCategories_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFriendsList_GetCategories_Request) Reset() {
	*x = CFriendsList_GetCategories_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetCategories_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetCategories_Request) ProtoMessage() {}

func (x *CFriendsList_GetCategories_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetCategories_Request.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetCategories_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{121}
}

type CFriendsList_GetCategories_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*CFriendsListCategory `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
}

func (x *CFriendsList_GetCategories_Response) Reset() {
	*x = CFriendsList_GetCategories_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetCategories_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetCategories_Response) ProtoMessage() {}

func (x *CFriendsList_GetCategories_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetCategories_Response.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetCategories_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{122}
}

func (x *CFriendsList_GetCategories_Response) GetCategories() []*CFriendsListCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type CFriendsListFavoriteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid   *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Clanid      *uint32 `protobuf:"varint,2,opt,name=clanid" json:"clanid,omitempty"`
	ChatGroupId *uint64 `protobuf:"varint,3,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CFriendsListFavoriteEntry) Reset() {
	*x = CFriendsListFavoriteEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsListFavoriteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsListFavoriteEntry) ProtoMessage() {}

func (x *CFriendsListFavoriteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsListFavoriteEntry.ProtoReflect.Descriptor instead.
func (*CFriendsListFavoriteEntry) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{123}
}

func (x *CFriendsListFavoriteEntry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CFriendsListFavoriteEntry) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CFriendsListFavoriteEntry) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CFriendsList_GetFavorites_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFriendsList_GetFavorites_Request) Reset() {
	*x = CFriendsList_GetFavorites_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetFavorites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetFavorites_Request) ProtoMessage() {}

func (x *CFriendsList_GetFavorites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetFavorites_Request.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetFavorites_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{124}
}

type CFriendsList_GetFavorites_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Favorites []*CFriendsListFavoriteEntry `protobuf:"bytes,1,rep,name=favorites" json:"favorites,omitempty"`
}

func (x *CFriendsList_GetFavorites_Response) Reset() {
	*x = CFriendsList_GetFavorites_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetFavorites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetFavorites_Response) ProtoMessage() {}

func (x *CFriendsList_GetFavorites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetFavorites_Response.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetFavorites_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{125}
}

func (x *CFriendsList_GetFavorites_Response) GetFavorites() []*CFriendsListFavoriteEntry {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type CFriendsList_SetFavorites_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Favorites []*CFriendsListFavoriteEntry `protobuf:"bytes,1,rep,name=favorites" json:"favorites,omitempty"`
}

func (x *CFriendsList_SetFavorites_Request) Reset() {
	*x = CFriendsList_SetFavorites_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_SetFavorites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_SetFavorites_Request) ProtoMessage() {}

func (x *CFriendsList_SetFavorites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_SetFavorites_Request.ProtoReflect.Descriptor instead.
func (*CFriendsList_SetFavorites_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{126}
}

func (x *CFriendsList_SetFavorites_Request) GetFavorites() []*CFriendsListFavoriteEntry {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type CFriendsList_SetFavorites_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFriendsList_SetFavorites_Response) Reset() {
	*x = CFriendsList_SetFavorites_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_SetFavorites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_SetFavorites_Response) ProtoMessage() {}

func (x *CFriendsList_SetFavorites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_SetFavorites_Response.ProtoReflect.Descriptor instead.
func (*CFriendsList_SetFavorites_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{127}
}

type CFriendsList_FavoritesChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Favorites []*CFriendsListFavoriteEntry `protobuf:"bytes,1,rep,name=favorites" json:"favorites,omitempty"`
}

func (x *CFriendsList_FavoritesChanged_Notification) Reset() {
	*x = CFriendsList_FavoritesChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_FavoritesChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_FavoritesChanged_Notification) ProtoMessage() {}

func (x *CFriendsList_FavoritesChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_FavoritesChanged_Notification.ProtoReflect.Descriptor instead.
func (*CFriendsList_FavoritesChanged_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{128}
}

func (x *CFriendsList_FavoritesChanged_Notification) GetFavorites() []*CFriendsListFavoriteEntry {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type CFriendsList_GetFriendsList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFriendsList_GetFriendsList_Request) Reset() {
	*x = CFriendsList_GetFriendsList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetFriendsList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetFriendsList_Request) ProtoMessage() {}

func (x *CFriendsList_GetFriendsList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetFriendsList_Request.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetFriendsList_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{129}
}

type CFriendsList_GetFriendsList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friendslist *protobuf.CMsgClientFriendsList `protobuf:"bytes,1,opt,name=friendslist" json:"friendslist,omitempty"`
}

func (x *CFriendsList_GetFriendsList_Response) Reset() {
	*x = CFriendsList_GetFriendsList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetFriendsList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetFriendsList_Response) ProtoMessage() {}

func (x *CFriendsList_GetFriendsList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetFriendsList_Response.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetFriendsList_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{130}
}

func (x *CFriendsList_GetFriendsList_Response) GetFriendslist() *protobuf.CMsgClientFriendsList {
	if x != nil {
		return x.Friendslist
	}
	return nil
}

type CClan_RespondToClanInvite_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Accept  *bool   `protobuf:"varint,2,opt,name=accept" json:"accept,omitempty"`
}

func (x *CClan_RespondToClanInvite_Request) Reset() {
	*x = CClan_RespondToClanInvite_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClan_RespondToClanInvite_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClan_RespondToClanInvite_Request) ProtoMessage() {}

func (x *CClan_RespondToClanInvite_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClan_RespondToClanInvite_Request.ProtoReflect.Descriptor instead.
func (*CClan_RespondToClanInvite_Request) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{131}
}

func (x *CClan_RespondToClanInvite_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClan_RespondToClanInvite_Request) GetAccept() bool {
	if x != nil && x.Accept != nil {
		return *x.Accept
	}
	return false
}

type CClan_RespondToClanInvite_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClan_RespondToClanInvite_Response) Reset() {
	*x = CClan_RespondToClanInvite_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClan_RespondToClanInvite_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClan_RespondToClanInvite_Response) ProtoMessage() {}

func (x *CClan_RespondToClanInvite_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClan_RespondToClanInvite_Response.ProtoReflect.Descriptor instead.
func (*CClan_RespondToClanInvite_Response) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{132}
}

type CProductImpressionsFromClient_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impressions []*CProductImpressionsFromClient_Notification_Impression `protobuf:"bytes,1,rep,name=impressions" json:"impressions,omitempty"`
}

func (x *CProductImpressionsFromClient_Notification) Reset() {
	*x = CProductImpressionsFromClient_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CProductImpressionsFromClient_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CProductImpressionsFromClient_Notification) ProtoMessage() {}

func (x *CProductImpressionsFromClient_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CProductImpressionsFromClient_Notification.ProtoReflect.Descriptor instead.
func (*CProductImpressionsFromClient_Notification) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{133}
}

func (x *CProductImpressionsFromClient_Notification) GetImpressions() []*CProductImpressionsFromClient_Notification_Impression {
	if x != nil {
		return x.Impressions
	}
	return nil
}

type CProductImpressionsFromClient_Notification_Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Appid          *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	NumImpressions *uint32 `protobuf:"varint,3,opt,name=num_impressions,json=numImpressions" json:"num_impressions,omitempty"`
}

func (x *CProductImpressionsFromClient_Notification_Impression) Reset() {
	*x = CProductImpressionsFromClient_Notification_Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CProductImpressionsFromClient_Notification_Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CProductImpressionsFromClient_Notification_Impression) ProtoMessage() {}

func (x *CProductImpressionsFromClient_Notification_Impression) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CProductImpressionsFromClient_Notification_Impression.ProtoReflect.Descriptor instead.
func (*CProductImpressionsFromClient_Notification_Impression) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{134}
}

func (x *CProductImpressionsFromClient_Notification_Impression) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CProductImpressionsFromClient_Notification_Impression) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CProductImpressionsFromClient_Notification_Impression) GetNumImpressions() uint32 {
	if x != nil && x.NumImpressions != nil {
		return *x.NumImpressions
	}
	return 0
}

type NotImplemented struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotImplemented) Reset() {
	*x = NotImplemented{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webui_friends_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotImplemented) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotImplemented) ProtoMessage() {}

func (x *NotImplemented) ProtoReflect() protoreflect.Message {
	mi := &file_webui_friends_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotImplemented.ProtoReflect.Descriptor instead.
func (*NotImplemented) Descriptor() ([]byte, []int) {
	return file_webui_friends_proto_rawDescGZIP(), []int{135}
}

var File_webui_friends_proto protoreflect.FileDescriptor

var file_webui_friends_proto_rawDesc = []byte{
	0x0a, 0x13, 0x77, 0x65, 0x62, 0x75, 0x69, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x1a, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x1b, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x43, 0x44, 0x44, 0x42, 0x41, 0x70,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x61,
	0x70, 0x70, 0x73, 0x22, 0x65, 0x0a, 0x31, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x32, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x38, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x01,
	0x0a, 0x3c, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xeb, 0x02,
	0x0a, 0x12, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x22, 0xbf, 0x04, 0x0a, 0x24,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x22, 0xa3, 0x01,
	0x0a, 0x27, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67,
	0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x25, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x61, 0x73, 0x5f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x28, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x32, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x55, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x40, 0x0a, 0x0c, 0x43, 0x41, 0x70, 0x70, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x2b, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x43, 0x6c, 0x61,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x1d,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x47,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x15, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x13, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x64, 0x0a, 0x28, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x37, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70,
	0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x23, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7d, 0x0a,
	0x35, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x37,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x2f, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x2f, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01,
	0x0a, 0x3f, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x31, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x3e, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe5, 0x02, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x77, 0x65, 0x62, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x57, 0x65, 0x62, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x6d, 0x70, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x4d, 0x70, 0x34, 0x22, 0x64, 0x0a, 0x25, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x29, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x2b, 0x0a,
	0x29, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x1f, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x21,
	0x0a, 0x1f, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x0a, 0x22, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x24, 0x0a,
	0x22, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x25, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x18,
	0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x6d, 0x69,
	0x6e, 0x69, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73,
	0x22, 0x95, 0x02, 0x0a, 0x28, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x17, 0x6d, 0x69,
	0x6e, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x2f, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x42, 0x0a, 0x2e, 0x43, 0x57, 0x65, 0x62,
	0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x60, 0x0a, 0x2f,
	0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd,
	0x01, 0x0a, 0x2b, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x73,
	0x72, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x9e,
	0x02, 0x0a, 0x32, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x13, 0x73, 0x73, 0x72, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x53, 0x53, 0x52, 0x43, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x73, 0x73,
	0x72, 0x63, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x22,
	0x7e, 0x0a, 0x4a, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x53, 0x53, 0x52, 0x43, 0x54, 0x6f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x73, 0x72,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22,
	0xc7, 0x02, 0x0a, 0x39, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70, 0x57, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x70, 0x57, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x18, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x3a, 0x43, 0x57, 0x65,
	0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x26, 0x43, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x27, 0x43, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x2d, 0x43, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x25, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e,
	0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e,
	0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xac, 0x01, 0x0a, 0x33, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x4d, 0x0a, 0x22, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e,
	0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x25,
	0x0a, 0x23, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x24, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x2b, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x6f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0xd7, 0x02,
	0x0a, 0x27, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69,
	0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x63, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12,
	0x3b, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x6d,
	0x69, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x4e, 0x6f, 0x4d,
	0x69, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x75, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x28, 0x43, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x2c, 0x43, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x70, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69,
	0x70, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x73, 0x72, 0x63, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x73, 0x72,
	0x63, 0x4d, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x65, 0x74, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x64, 0x0a, 0x2d,
	0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x2c, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x4e, 0x65, 0x77, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x29,
	0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x66, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x4f, 0x6e,
	0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x26, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x6f,
	0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x5c, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x2c, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x65,
	0x64, 0x22, 0x5a, 0x0a, 0x2a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x7a, 0x0a,
	0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x32, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x75, 0x0a, 0x2a, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x22, 0xe2, 0x01, 0x0a, 0x30, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x35, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x32, 0x0a, 0x30, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf3, 0x04, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x65, 0x64, 0x22, 0x5c, 0x0a, 0x25, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x5e, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x4b, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x52, 0x0a,
	0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x0a,
	0x30, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0xff, 0x01, 0x0a, 0x0d, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x1a, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x54, 0x0a, 0x1d, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x31, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x3d, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x74, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xb7, 0x01, 0x0a, 0x10, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x61, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x42,
	0x61, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75,
	0x6e, 0x64, 0x6f, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x96, 0x01, 0x0a, 0x21, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41,
	0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x56, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x58, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x1d, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61,
	0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x19, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c, 0x61, 0x69,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73,
	0x22, 0x4f, 0x0a, 0x18, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5f, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x4d, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x5f, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x54,
	0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x24, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x7b, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22,
	0x64, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x79, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x79, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x42, 0x65, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x24,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x37, 0x0a,
	0x1f, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xf7, 0x04, 0x0a, 0x1b, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82,
	0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x08, 0x74, 0x61,
	0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4c, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x12, 0x4c,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x5f, 0x62, 0x65, 0x6c, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x42, 0x65, 0x6c, 0x74, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x42, 0x65, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x0b,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x59, 0x0a, 0x25, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x1a,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4d, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x86, 0x01, 0x0a, 0x2a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x71, 0x0a,
	0x14, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x24, 0x0a, 0x22, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x23, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x19, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5e, 0x0a, 0x22, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x22, 0x5d, 0x0a, 0x21, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22,
	0x24, 0x0a, 0x22, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x2a, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x25, 0x0a,
	0x23, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x24, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x21, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0x24, 0x0a,
	0x22, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f,
	0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x2a, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a,
	0x35, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x32, 0xbf, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1b,
	0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x25, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x28, 0x2e, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0f,
	0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a,
	0x2c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x11, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x2e,
	0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x29,
	0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x4e, 0x6f,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x33, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2c, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65,
	0x77, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x1a, 0x29, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x4e, 0x6f,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2d, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x32, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x1a, 0x30, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x1a, 0x30, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x38, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x36, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x38, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xae, 0x02, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x52,
	0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x23, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x43, 0x57,
	0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdf, 0x01, 0x0a, 0x19, 0x57, 0x65, 0x62,
	0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43,
	0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x23, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52,
	0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xae, 0x06, 0x0a, 0x09, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e,
	0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x2d, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x1a, 0x23, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x27, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f,
	0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x26, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f,
	0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x45, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x43,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x4f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45,
	0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x25, 0x2e, 0x43,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f,
	0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xed, 0x04, 0x0a, 0x0f,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x56, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2c, 0x2e, 0x43,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x2a, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x19, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x2e,
	0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e,
	0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1a, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa2, 0x14, 0x0a, 0x07,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x12, 0x54, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x1a, 0x2d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0f, 0x2e,
	0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2d,
	0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2b, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2c, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x32, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x1a, 0x26, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2c, 0x2e,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0f,
	0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a,
	0x2c, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x2b, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x1a, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x1a, 0x1b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x4e,
	0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x1e, 0x2e,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x12, 0x1c, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61,
	0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x1e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64,
	0x42, 0x61, 0x6e, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x1a, 0x1d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61,
	0x6e, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x1a, 0x1e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x1a, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0f,
	0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a,
	0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0x26, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xfa, 0x02, 0x0a, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x43, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x61, 0x0a,
	0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2b, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x66, 0x0a, 0x04, 0x43, 0x6c, 0x61, 0x6e, 0x12, 0x5e, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x22, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54,
	0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x57, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x22, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65,
}

var (
	file_webui_friends_proto_rawDescOnce sync.Once
	file_webui_friends_proto_rawDescData = file_webui_friends_proto_rawDesc
)

func file_webui_friends_proto_rawDescGZIP() []byte {
	file_webui_friends_proto_rawDescOnce.Do(func() {
		file_webui_friends_proto_rawDescData = protoimpl.X.CompressGZIP(file_webui_friends_proto_rawDescData)
	})
	return file_webui_friends_proto_rawDescData
}

var file_webui_friends_proto_msgTypes = make([]protoimpl.MessageInfo, 136)
var file_webui_friends_proto_goTypes = []interface{}{
	(*CCommunity_GetApps_Request)(nil),                                      // 0: CCommunity_GetApps_Request
	(*CCommunity_GetApps_Response)(nil),                                     // 1: CCommunity_GetApps_Response
	(*CCommunity_GetAppRichPresenceLocalization_Request)(nil),               // 2: CCommunity_GetAppRichPresenceLocalization_Request
	(*CCommunity_GetAppRichPresenceLocalization_Response)(nil),              // 3: CCommunity_GetAppRichPresenceLocalization_Response
	(*CCommunity_GetAppRichPresenceLocalization_Response_Token)(nil),        // 4: CCommunity_GetAppRichPresenceLocalization_Response_Token
	(*CCommunity_GetAppRichPresenceLocalization_Response_TokenList)(nil),    // 5: CCommunity_GetAppRichPresenceLocalization_Response_TokenList
	(*CCommunity_Comment)(nil),                                              // 6: CCommunity_Comment
	(*CCommunity_GetCommentThread_Response)(nil),                            // 7: CCommunity_GetCommentThread_Response
	(*CCommunity_PostCommentToThread_Response)(nil),                         // 8: CCommunity_PostCommentToThread_Response
	(*CCommunity_DeleteCommentFromThread_Response)(nil),                     // 9: CCommunity_DeleteCommentFromThread_Response
	(*CCommunity_RateCommentThread_Response)(nil),                           // 10: CCommunity_RateCommentThread_Response
	(*CCommunity_GetCommentThreadRatings_Response)(nil),                     // 11: CCommunity_GetCommentThreadRatings_Response
	(*CCommunity_RateClanAnnouncement_Response)(nil),                        // 12: CCommunity_RateClanAnnouncement_Response
	(*CCommunity_GetClanAnnouncementVoteForUser_Response)(nil),              // 13: CCommunity_GetClanAnnouncementVoteForUser_Response
	(*CAppPriority)(nil),                                                    // 14: CAppPriority
	(*CCommunity_GetUserPartnerEventNews_Response)(nil),                     // 15: CCommunity_GetUserPartnerEventNews_Response
	(*CCommunity_PartnerEventResult)(nil),                                   // 16: CCommunity_PartnerEventResult
	(*CCommunity_GetBestEventsForUser_Response)(nil),                        // 17: CCommunity_GetBestEventsForUser_Response
	(*CCommunity_ClearUserPartnerEventsAppPriorities_Response)(nil),         // 18: CCommunity_ClearUserPartnerEventsAppPriorities_Response
	(*CCommunity_PartnerEventsAppPriority)(nil),                             // 19: CCommunity_PartnerEventsAppPriority
	(*CCommunity_GetUserPartnerEventsAppPriorities_Response)(nil),           // 20: CCommunity_GetUserPartnerEventsAppPriorities_Response
	(*CCommunity_ClearSinglePartnerEventsAppPriority_Response)(nil),         // 21: CCommunity_ClearSinglePartnerEventsAppPriority_Response
	(*CCommunity_PartnerEventsShowMoreForApp_Response)(nil),                 // 22: CCommunity_PartnerEventsShowMoreForApp_Response
	(*CCommunity_PartnerEventsShowLessForApp_Response)(nil),                 // 23: CCommunity_PartnerEventsShowLessForApp_Response
	(*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking)(nil), // 24: CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking
	(*CCommunity_MarkPartnerEventsForUser_Response)(nil),                    // 25: CCommunity_MarkPartnerEventsForUser_Response
	(*CCommunity_GetUserPartnerEventViewStatus_Response)(nil),               // 26: CCommunity_GetUserPartnerEventViewStatus_Response
	(*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent)(nil),  // 27: CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent
	(*ProfileItem)(nil),                                                                // 28: ProfileItem
	(*CPlayer_GetProfileBackground_Response)(nil),                                      // 29: CPlayer_GetProfileBackground_Response
	(*CPlayer_SetProfileBackground_Response)(nil),                                      // 30: CPlayer_SetProfileBackground_Response
	(*CPlayer_GetMiniProfileBackground_Response)(nil),                                  // 31: CPlayer_GetMiniProfileBackground_Response
	(*CPlayer_SetMiniProfileBackground_Response)(nil),                                  // 32: CPlayer_SetMiniProfileBackground_Response
	(*CPlayer_GetAvatarFrame_Response)(nil),                                            // 33: CPlayer_GetAvatarFrame_Response
	(*CPlayer_SetAvatarFrame_Response)(nil),                                            // 34: CPlayer_SetAvatarFrame_Response
	(*CPlayer_GetAnimatedAvatar_Response)(nil),                                         // 35: CPlayer_GetAnimatedAvatar_Response
	(*CPlayer_SetAnimatedAvatar_Response)(nil),                                         // 36: CPlayer_SetAnimatedAvatar_Response
	(*CPlayer_GetProfileItemsOwned_Response)(nil),                                      // 37: CPlayer_GetProfileItemsOwned_Response
	(*CPlayer_GetProfileItemsEquipped_Response)(nil),                                   // 38: CPlayer_GetProfileItemsEquipped_Response
	(*CWebRTCClient_InitiateWebRTCConnection_Request)(nil),                             // 39: CWebRTCClient_InitiateWebRTCConnection_Request
	(*CWebRTCClient_InitiateWebRTCConnection_Response)(nil),                            // 40: CWebRTCClient_InitiateWebRTCConnection_Response
	(*CWebRTC_WebRTCSessionConnected_Notification)(nil),                                // 41: CWebRTC_WebRTCSessionConnected_Notification
	(*CWebRTC_WebRTCUpdateRemoteDescription_Notification)(nil),                         // 42: CWebRTC_WebRTCUpdateRemoteDescription_Notification
	(*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping)(nil), // 43: CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
	(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request)(nil),                  // 44: CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
	(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response)(nil),                 // 45: CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
	(*CVoiceChat_RequestOneOnOneChat_Request)(nil),                                     // 46: CVoiceChat_RequestOneOnOneChat_Request
	(*CVoiceChat_RequestOneOnOneChat_Response)(nil),                                    // 47: CVoiceChat_RequestOneOnOneChat_Response
	(*CVoiceChat_OneOnOneChatRequested_Notification)(nil),                              // 48: CVoiceChat_OneOnOneChatRequested_Notification
	(*CVoiceChat_AnswerOneOnOneChat_Request)(nil),                                      // 49: CVoiceChat_AnswerOneOnOneChat_Request
	(*CVoiceChat_AnswerOneOnOneChat_Response)(nil),                                     // 50: CVoiceChat_AnswerOneOnOneChat_Response
	(*CVoiceChat_OneOnOneChatRequestResponse_Notification)(nil),                        // 51: CVoiceChat_OneOnOneChatRequestResponse_Notification
	(*CVoiceChat_EndOneOnOneChat_Request)(nil),                                         // 52: CVoiceChat_EndOneOnOneChat_Request
	(*CVoiceChat_EndOneOnOneChat_Response)(nil),                                        // 53: CVoiceChat_EndOneOnOneChat_Response
	(*CVoiceChat_LeaveOneOnOneChat_Request)(nil),                                       // 54: CVoiceChat_LeaveOneOnOneChat_Request
	(*CVoiceChat_LeaveOneOnOneChat_Response)(nil),                                      // 55: CVoiceChat_LeaveOneOnOneChat_Response
	(*CVoiceChat_UserJoinedVoiceChat_Notification)(nil),                                // 56: CVoiceChat_UserJoinedVoiceChat_Notification
	(*CVoiceChat_UserVoiceStatus_Notification)(nil),                                    // 57: CVoiceChat_UserVoiceStatus_Notification
	(*CVoiceChat_AllMembersStatus_Notification)(nil),                                   // 58: CVoiceChat_AllMembersStatus_Notification
	(*CVoiceChat_UpdateVoiceChatWebRTCData_Request)(nil),                               // 59: CVoiceChat_UpdateVoiceChatWebRTCData_Request
	(*CVoiceChat_UpdateVoiceChatWebRTCData_Response)(nil),                              // 60: CVoiceChat_UpdateVoiceChatWebRTCData_Response
	(*CVoiceChat_UploadClientVoiceChatLogs_Request)(nil),                               // 61: CVoiceChat_UploadClientVoiceChatLogs_Request
	(*CVoiceChat_UploadClientVoiceChatLogs_Response)(nil),                              // 62: CVoiceChat_UploadClientVoiceChatLogs_Response
	(*CVoiceChat_LeaveVoiceChat_Response)(nil),                                         // 63: CVoiceChat_LeaveVoiceChat_Response
	(*CVoiceChat_UserLeftVoiceChat_Notification)(nil),                                  // 64: CVoiceChat_UserLeftVoiceChat_Notification
	(*CVoiceChat_VoiceChatEnded_Notification)(nil),                                     // 65: CVoiceChat_VoiceChatEnded_Notification
	(*CSteamTV_CreateBroadcastChannel_Response)(nil),                                   // 66: CSteamTV_CreateBroadcastChannel_Response
	(*CSteamTV_GetBroadcastChannelID_Response)(nil),                                    // 67: CSteamTV_GetBroadcastChannelID_Response
	(*CSteamTV_SetBroadcastChannelProfile_Response)(nil),                               // 68: CSteamTV_SetBroadcastChannelProfile_Response
	(*CSteamTV_GetBroadcastChannelProfile_Response)(nil),                               // 69: CSteamTV_GetBroadcastChannelProfile_Response
	(*CSteamTV_SetBroadcastChannelImage_Response)(nil),                                 // 70: CSteamTV_SetBroadcastChannelImage_Response
	(*CSteamTV_GetBroadcastChannelImages_Response)(nil),                                // 71: CSteamTV_GetBroadcastChannelImages_Response
	(*CSteamTV_GetBroadcastChannelImages_Response_Images)(nil),                         // 72: CSteamTV_GetBroadcastChannelImages_Response_Images
	(*CSteamTV_GetBroadcastChannelLinks_Response)(nil),                                 // 73: CSteamTV_GetBroadcastChannelLinks_Response
	(*CSteamTV_GetBroadcastChannelLinks_Response_Links)(nil),                           // 74: CSteamTV_GetBroadcastChannelLinks_Response_Links
	(*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links)(nil),                      // 75: CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
	(*CSteamTV_SetBroadcastChannelLinkRegions_Response)(nil),                           // 76: CSteamTV_SetBroadcastChannelLinkRegions_Response
	(*CSteamTV_GetBroadcastChannelStatus_Response)(nil),                                // 77: CSteamTV_GetBroadcastChannelStatus_Response
	(*GetBroadcastChannelEntry)(nil),                                                   // 78: GetBroadcastChannelEntry
	(*CSteamTV_GetFollowedChannels_Response)(nil),                                      // 79: CSteamTV_GetFollowedChannels_Response
	(*CSteamTV_GetSubscribedChannels_Response)(nil),                                    // 80: CSteamTV_GetSubscribedChannels_Response
	(*CSteamTV_FollowBroadcastChannel_Response)(nil),                                   // 81: CSteamTV_FollowBroadcastChannel_Response
	(*CSteamTV_SubscribeBroadcastChannel_Response)(nil),                                // 82: CSteamTV_SubscribeBroadcastChannel_Response
	(*CSteamTV_ReportBroadcastChannel_Response)(nil),                                   // 83: CSteamTV_ReportBroadcastChannel_Response
	(*CSteamTV_GetBroadcastChannelInteraction_Response)(nil),                           // 84: CSteamTV_GetBroadcastChannelInteraction_Response
	(*CSteamTV_Game)(nil),                                                              // 85: CSteamTV_Game
	(*CSteamTV_GetGames_Response)(nil),                                                 // 86: CSteamTV_GetGames_Response
	(*CSteamTV_GetChannels_Response)(nil),                                              // 87: CSteamTV_GetChannels_Response
	(*CSteamTV_GetBroadcastChannelBroadcasters_Response)(nil),                          // 88: CSteamTV_GetBroadcastChannelBroadcasters_Response
	(*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster)(nil),              // 89: CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
	(*CSteamTV_ChatBan)(nil),                                                           // 90: CSteamTV_ChatBan
	(*CSteamTV_AddChatBan_Request)(nil),                                                // 91: CSteamTV_AddChatBan_Request
	(*CSteamTV_AddChatBan_Response)(nil),                                               // 92: CSteamTV_AddChatBan_Response
	(*CSteamTV_GetChatBans_Response)(nil),                                              // 93: CSteamTV_GetChatBans_Response
	(*CSteamTV_AddChatModerator_Request)(nil),                                          // 94: CSteamTV_AddChatModerator_Request
	(*CSteamTV_AddChatModerator_Response)(nil),                                         // 95: CSteamTV_AddChatModerator_Response
	(*CSteamTV_GetChatModerators_Request)(nil),                                         // 96: CSteamTV_GetChatModerators_Request
	(*CSteamTV_ChatModerator)(nil),                                                     // 97: CSteamTV_ChatModerator
	(*CSteamTV_GetChatModerators_Response)(nil),                                        // 98: CSteamTV_GetChatModerators_Response
	(*CSteamTV_AddWordBan_Response)(nil),                                               // 99: CSteamTV_AddWordBan_Response
	(*CSteamTV_GetWordBans_Response)(nil),                                              // 100: CSteamTV_GetWordBans_Response
	(*CSteamTV_JoinChat_Request)(nil),                                                  // 101: CSteamTV_JoinChat_Request
	(*CSteamTV_JoinChat_Response)(nil),                                                 // 102: CSteamTV_JoinChat_Response
	(*CSteamTV_Search_Response)(nil),                                                   // 103: CSteamTV_Search_Response
	(*CSteamTV_GetSteamTVUserSettings_Response)(nil),                                   // 104: CSteamTV_GetSteamTVUserSettings_Response
	(*CSteamTV_SetSteamTVUserSettings_Response)(nil),                                   // 105: CSteamTV_SetSteamTVUserSettings_Response
	(*CSteamTV_GetMyBroadcastChannels_Response)(nil),                                   // 106: CSteamTV_GetMyBroadcastChannels_Response
	(*CSteamTV_HomePageTemplate_Takeover)(nil),                                         // 107: CSteamTV_HomePageTemplate_Takeover
	(*CSteamTV_HomePageTemplate_SingleGame)(nil),                                       // 108: CSteamTV_HomePageTemplate_SingleGame
	(*GameListEntry)(nil),                                                              // 109: GameListEntry
	(*CSteamTV_HomePageTemplate_GameList)(nil),                                         // 110: CSteamTV_HomePageTemplate_GameList
	(*CSteamTV_HomePageTemplate_QuickExplore)(nil),                                     // 111: CSteamTV_HomePageTemplate_QuickExplore
	(*CSteamTV_HomePageTemplate_ConveyorBelt)(nil),                                     // 112: CSteamTV_HomePageTemplate_ConveyorBelt
	(*CSteamTV_HomePageTemplate_WatchParty)(nil),                                       // 113: CSteamTV_HomePageTemplate_WatchParty
	(*CSteamTV_HomePageTemplate_Developer)(nil),                                        // 114: CSteamTV_HomePageTemplate_Developer
	(*CSteamTV_HomePageTemplate_Event)(nil),                                            // 115: CSteamTV_HomePageTemplate_Event
	(*CSteamTV_HomePageContentRow)(nil),                                                // 116: CSteamTV_HomePageContentRow
	(*CSteamTV_GetHomePageContents_Response)(nil),                                      // 117: CSteamTV_GetHomePageContents_Response
	(*CSteamTV_BroadcastClipInfo)(nil),                                                 // 118: CSteamTV_BroadcastClipInfo
	(*CSteamTV_GetBroadcastChannelClips_Response)(nil),                                 // 119: CSteamTV_GetBroadcastChannelClips_Response
	(*CFriendsListCategory)(nil),                                                       // 120: CFriendsListCategory
	(*CFriendsList_GetCategories_Request)(nil),                                         // 121: CFriendsList_GetCategories_Request
	(*CFriendsList_GetCategories_Response)(nil),                                        // 122: CFriendsList_GetCategories_Response
	(*CFriendsListFavoriteEntry)(nil),                                                  // 123: CFriendsListFavoriteEntry
	(*CFriendsList_GetFavorites_Request)(nil),                                          // 124: CFriendsList_GetFavorites_Request
	(*CFriendsList_GetFavorites_Response)(nil),                                         // 125: CFriendsList_GetFavorites_Response
	(*CFriendsList_SetFavorites_Request)(nil),                                          // 126: CFriendsList_SetFavorites_Request
	(*CFriendsList_SetFavorites_Response)(nil),                                         // 127: CFriendsList_SetFavorites_Response
	(*CFriendsList_FavoritesChanged_Notification)(nil),                                 // 128: CFriendsList_FavoritesChanged_Notification
	(*CFriendsList_GetFriendsList_Request)(nil),                                        // 129: CFriendsList_GetFriendsList_Request
	(*CFriendsList_GetFriendsList_Response)(nil),                                       // 130: CFriendsList_GetFriendsList_Response
	(*CClan_RespondToClanInvite_Request)(nil),                                          // 131: CClan_RespondToClanInvite_Request
	(*CClan_RespondToClanInvite_Response)(nil),                                         // 132: CClan_RespondToClanInvite_Response
	(*CProductImpressionsFromClient_Notification)(nil),                                 // 133: CProductImpressionsFromClient_Notification
	(*CProductImpressionsFromClient_Notification_Impression)(nil),                      // 134: CProductImpressionsFromClient_Notification_Impression
	(*NotImplemented)(nil),                                                             // 135: NotImplemented
	(*protobuf.CCDDBAppDetailCommon)(nil),                                              // 136: CCDDBAppDetailCommon
	(*protobuf.CMsgIPAddress)(nil),                                                     // 137: CMsgIPAddress
	(*protobuf.CClanMatchEventByRange)(nil),                                            // 138: CClanMatchEventByRange
	(*protobuf.CMsgClientFriendsList)(nil),                                             // 139: CMsgClientFriendsList
	(*unified.NoResponse)(nil),                                                               // 140: NoResponse
}
var file_webui_friends_proto_depIdxs = []int32{
	136, // 0: CCommunity_GetApps_Response.apps:type_name -> CCDDBAppDetailCommon
	5,   // 1: CCommunity_GetAppRichPresenceLocalization_Response.token_lists:type_name -> CCommunity_GetAppRichPresenceLocalization_Response_TokenList
	4,   // 2: CCommunity_GetAppRichPresenceLocalization_Response_TokenList.tokens:type_name -> CCommunity_GetAppRichPresenceLocalization_Response_Token
	137, // 3: CCommunity_Comment.ipaddress:type_name -> CMsgIPAddress
	6,   // 4: CCommunity_GetCommentThread_Response.comments:type_name -> CCommunity_Comment
	6,   // 5: CCommunity_GetCommentThread_Response.deleted_comments:type_name -> CCommunity_Comment
	138, // 6: CCommunity_GetUserPartnerEventNews_Response.results:type_name -> CClanMatchEventByRange
	16,  // 7: CCommunity_GetBestEventsForUser_Response.results:type_name -> CCommunity_PartnerEventResult
	19,  // 8: CCommunity_GetUserPartnerEventsAppPriorities_Response.priorities:type_name -> CCommunity_PartnerEventsAppPriority
	27,  // 9: CCommunity_GetUserPartnerEventViewStatus_Response.events:type_name -> CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent
	28,  // 10: CPlayer_GetProfileBackground_Response.profile_background:type_name -> ProfileItem
	28,  // 11: CPlayer_GetMiniProfileBackground_Response.profile_background:type_name -> ProfileItem
	28,  // 12: CPlayer_GetAvatarFrame_Response.avatar_frame:type_name -> ProfileItem
	28,  // 13: CPlayer_GetAnimatedAvatar_Response.avatar:type_name -> ProfileItem
	28,  // 14: CPlayer_GetProfileItemsOwned_Response.profile_backgrounds:type_name -> ProfileItem
	28,  // 15: CPlayer_GetProfileItemsOwned_Response.mini_profile_backgrounds:type_name -> ProfileItem
	28,  // 16: CPlayer_GetProfileItemsOwned_Response.avatar_frames:type_name -> ProfileItem
	28,  // 17: CPlayer_GetProfileItemsOwned_Response.animated_avatars:type_name -> ProfileItem
	28,  // 18: CPlayer_GetProfileItemsEquipped_Response.profile_background:type_name -> ProfileItem
	28,  // 19: CPlayer_GetProfileItemsEquipped_Response.mini_profile_background:type_name -> ProfileItem
	28,  // 20: CPlayer_GetProfileItemsEquipped_Response.avatar_frame:type_name -> ProfileItem
	28,  // 21: CPlayer_GetProfileItemsEquipped_Response.animated_avatar:type_name -> ProfileItem
	43,  // 22: CWebRTC_WebRTCUpdateRemoteDescription_Notification.ssrcs_to_accountids:type_name -> CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
	57,  // 23: CVoiceChat_AllMembersStatus_Notification.users:type_name -> CVoiceChat_UserVoiceStatus_Notification
	72,  // 24: CSteamTV_GetBroadcastChannelImages_Response.images:type_name -> CSteamTV_GetBroadcastChannelImages_Response_Images
	74,  // 25: CSteamTV_GetBroadcastChannelLinks_Response.links:type_name -> CSteamTV_GetBroadcastChannelLinks_Response_Links
	78,  // 26: CSteamTV_GetFollowedChannels_Response.results:type_name -> GetBroadcastChannelEntry
	78,  // 27: CSteamTV_GetSubscribedChannels_Response.results:type_name -> GetBroadcastChannelEntry
	78,  // 28: CSteamTV_Game.channels:type_name -> GetBroadcastChannelEntry
	85,  // 29: CSteamTV_GetGames_Response.results:type_name -> CSteamTV_Game
	78,  // 30: CSteamTV_GetChannels_Response.results:type_name -> GetBroadcastChannelEntry
	89,  // 31: CSteamTV_GetBroadcastChannelBroadcasters_Response.broadcasters:type_name -> CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
	90,  // 32: CSteamTV_GetChatBans_Response.results:type_name -> CSteamTV_ChatBan
	97,  // 33: CSteamTV_GetChatModerators_Response.results:type_name -> CSteamTV_ChatModerator
	78,  // 34: CSteamTV_Search_Response.results:type_name -> GetBroadcastChannelEntry
	78,  // 35: CSteamTV_GetMyBroadcastChannels_Response.results:type_name -> GetBroadcastChannelEntry
	78,  // 36: CSteamTV_HomePageTemplate_Takeover.broadcasts:type_name -> GetBroadcastChannelEntry
	78,  // 37: CSteamTV_HomePageTemplate_SingleGame.broadcasts:type_name -> GetBroadcastChannelEntry
	78,  // 38: GameListEntry.broadcast:type_name -> GetBroadcastChannelEntry
	109, // 39: CSteamTV_HomePageTemplate_GameList.entries:type_name -> GameListEntry
	78,  // 40: CSteamTV_HomePageTemplate_QuickExplore.broadcasts:type_name -> GetBroadcastChannelEntry
	78,  // 41: CSteamTV_HomePageTemplate_ConveyorBelt.broadcasts:type_name -> GetBroadcastChannelEntry
	78,  // 42: CSteamTV_HomePageTemplate_WatchParty.broadcast:type_name -> GetBroadcastChannelEntry
	78,  // 43: CSteamTV_HomePageTemplate_Developer.broadcast:type_name -> GetBroadcastChannelEntry
	107, // 44: CSteamTV_HomePageContentRow.takeover:type_name -> CSteamTV_HomePageTemplate_Takeover
	108, // 45: CSteamTV_HomePageContentRow.single_game:type_name -> CSteamTV_HomePageTemplate_SingleGame
	110, // 46: CSteamTV_HomePageContentRow.game_list:type_name -> CSteamTV_HomePageTemplate_GameList
	111, // 47: CSteamTV_HomePageContentRow.quick_explore:type_name -> CSteamTV_HomePageTemplate_QuickExplore
	112, // 48: CSteamTV_HomePageContentRow.conveyor_belt:type_name -> CSteamTV_HomePageTemplate_ConveyorBelt
	113, // 49: CSteamTV_HomePageContentRow.watch_party:type_name -> CSteamTV_HomePageTemplate_WatchParty
	114, // 50: CSteamTV_HomePageContentRow.developer:type_name -> CSteamTV_HomePageTemplate_Developer
	115, // 51: CSteamTV_HomePageContentRow.event:type_name -> CSteamTV_HomePageTemplate_Event
	116, // 52: CSteamTV_GetHomePageContents_Response.rows:type_name -> CSteamTV_HomePageContentRow
	118, // 53: CSteamTV_GetBroadcastChannelClips_Response.clips:type_name -> CSteamTV_BroadcastClipInfo
	120, // 54: CFriendsList_GetCategories_Response.categories:type_name -> CFriendsListCategory
	123, // 55: CFriendsList_GetFavorites_Response.favorites:type_name -> CFriendsListFavoriteEntry
	123, // 56: CFriendsList_SetFavorites_Request.favorites:type_name -> CFriendsListFavoriteEntry
	123, // 57: CFriendsList_FavoritesChanged_Notification.favorites:type_name -> CFriendsListFavoriteEntry
	139, // 58: CFriendsList_GetFriendsList_Response.friendslist:type_name -> CMsgClientFriendsList
	134, // 59: CProductImpressionsFromClient_Notification.impressions:type_name -> CProductImpressionsFromClient_Notification_Impression
	0,   // 60: Community.GetApps:input_type -> CCommunity_GetApps_Request
	2,   // 61: Community.GetAppRichPresenceLocalization:input_type -> CCommunity_GetAppRichPresenceLocalization_Request
	135, // 62: Community.GetCommentThread:input_type -> NotImplemented
	135, // 63: Community.PostCommentToThread:input_type -> NotImplemented
	135, // 64: Community.DeleteCommentFromThread:input_type -> NotImplemented
	135, // 65: Community.RateCommentThread:input_type -> NotImplemented
	135, // 66: Community.GetCommentThreadRatings:input_type -> NotImplemented
	135, // 67: Community.RateClanAnnouncement:input_type -> NotImplemented
	135, // 68: Community.GetClanAnnouncementVoteForUser:input_type -> NotImplemented
	135, // 69: Community.GetUserPartnerEventNews:input_type -> NotImplemented
	135, // 70: Community.GetBestEventsForUser:input_type -> NotImplemented
	135, // 71: Community.MarkPartnerEventsForUser:input_type -> NotImplemented
	135, // 72: Community.GetUserPartnerEventViewStatus:input_type -> NotImplemented
	135, // 73: Community.PartnerEventsShowMoreForApp:input_type -> NotImplemented
	135, // 74: Community.PartnerEventsShowLessForApp:input_type -> NotImplemented
	135, // 75: Community.ClearUserPartnerEventsAppPriorities:input_type -> NotImplemented
	135, // 76: Community.GetUserPartnerEventsAppPriorities:input_type -> NotImplemented
	135, // 77: Community.ClearSinglePartnerEventsAppPriority:input_type -> NotImplemented
	39,  // 78: WebRTCClient.InitiateWebRTCConnection:input_type -> CWebRTCClient_InitiateWebRTCConnection_Request
	44,  // 79: WebRTCClient.AcknowledgeUpdatedRemoteDescription:input_type -> CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
	41,  // 80: WebRTCClientNotifications.NotifyWebRTCSessionConnected:input_type -> CWebRTC_WebRTCSessionConnected_Notification
	42,  // 81: WebRTCClientNotifications.NotifyWebRTCUpdateRemoteDescription:input_type -> CWebRTC_WebRTCUpdateRemoteDescription_Notification
	59,  // 82: VoiceChat.UpdateVoiceChatWebRTCData:input_type -> CVoiceChat_UpdateVoiceChatWebRTCData_Request
	57,  // 83: VoiceChat.NotifyUserVoiceStatus:input_type -> CVoiceChat_UserVoiceStatus_Notification
	61,  // 84: VoiceChat.UploadClientVoiceChatLogs:input_type -> CVoiceChat_UploadClientVoiceChatLogs_Request
	135, // 85: VoiceChat.LeaveVoiceChat:input_type -> NotImplemented
	46,  // 86: VoiceChat.RequestOneOnOneChat:input_type -> CVoiceChat_RequestOneOnOneChat_Request
	49,  // 87: VoiceChat.AnswerOneOnOneChat:input_type -> CVoiceChat_AnswerOneOnOneChat_Request
	52,  // 88: VoiceChat.EndOneOnOneChat:input_type -> CVoiceChat_EndOneOnOneChat_Request
	54,  // 89: VoiceChat.LeaveOneOnOneChat:input_type -> CVoiceChat_LeaveOneOnOneChat_Request
	56,  // 90: VoiceChatClient.NotifyUserJoinedVoiceChat:input_type -> CVoiceChat_UserJoinedVoiceChat_Notification
	64,  // 91: VoiceChatClient.NotifyUserLeftVoiceChat:input_type -> CVoiceChat_UserLeftVoiceChat_Notification
	65,  // 92: VoiceChatClient.NotifyVoiceChatEnded:input_type -> CVoiceChat_VoiceChatEnded_Notification
	57,  // 93: VoiceChatClient.NotifyUserVoiceStatus:input_type -> CVoiceChat_UserVoiceStatus_Notification
	58,  // 94: VoiceChatClient.NotifyAllUsersVoiceStatus:input_type -> CVoiceChat_AllMembersStatus_Notification
	48,  // 95: VoiceChatClient.NotifyOneOnOneChatRequested:input_type -> CVoiceChat_OneOnOneChatRequested_Notification
	51,  // 96: VoiceChatClient.NotifyOneOnOneChatResponse:input_type -> CVoiceChat_OneOnOneChatRequestResponse_Notification
	135, // 97: SteamTV.CreateBroadcastChannel:input_type -> NotImplemented
	135, // 98: SteamTV.GetBroadcastChannelID:input_type -> NotImplemented
	135, // 99: SteamTV.SetBroadcastChannelProfile:input_type -> NotImplemented
	135, // 100: SteamTV.GetBroadcastChannelProfile:input_type -> NotImplemented
	135, // 101: SteamTV.SetBroadcastChannelImage:input_type -> NotImplemented
	135, // 102: SteamTV.GetBroadcastChannelImages:input_type -> NotImplemented
	135, // 103: SteamTV.SetBroadcastChannelLinkRegions:input_type -> NotImplemented
	135, // 104: SteamTV.GetBroadcastChannelLinks:input_type -> NotImplemented
	135, // 105: SteamTV.GetBroadcastChannelBroadcasters:input_type -> NotImplemented
	135, // 106: SteamTV.GetFollowedChannels:input_type -> NotImplemented
	135, // 107: SteamTV.GetSubscribedChannels:input_type -> NotImplemented
	135, // 108: SteamTV.GetBroadcastChannelStatus:input_type -> NotImplemented
	135, // 109: SteamTV.FollowBroadcastChannel:input_type -> NotImplemented
	135, // 110: SteamTV.SubscribeBroadcastChannel:input_type -> NotImplemented
	135, // 111: SteamTV.GetBroadcastChannelClips:input_type -> NotImplemented
	135, // 112: SteamTV.ReportBroadcastChannel:input_type -> NotImplemented
	135, // 113: SteamTV.GetBroadcastChannelInteraction:input_type -> NotImplemented
	135, // 114: SteamTV.GetGames:input_type -> NotImplemented
	135, // 115: SteamTV.GetChannels:input_type -> NotImplemented
	91,  // 116: SteamTV.AddChatBan:input_type -> CSteamTV_AddChatBan_Request
	135, // 117: SteamTV.GetChatBans:input_type -> NotImplemented
	94,  // 118: SteamTV.AddChatModerator:input_type -> CSteamTV_AddChatModerator_Request
	96,  // 119: SteamTV.GetChatModerators:input_type -> CSteamTV_GetChatModerators_Request
	135, // 120: SteamTV.AddWordBan:input_type -> NotImplemented
	135, // 121: SteamTV.GetWordBans:input_type -> NotImplemented
	101, // 122: SteamTV.JoinChat:input_type -> CSteamTV_JoinChat_Request
	135, // 123: SteamTV.Search:input_type -> NotImplemented
	135, // 124: SteamTV.GetSteamTVUserSettings:input_type -> NotImplemented
	135, // 125: SteamTV.SetSteamTVUserSettings:input_type -> NotImplemented
	135, // 126: SteamTV.GetMyBroadcastChannels:input_type -> NotImplemented
	135, // 127: SteamTV.GetHomePageContents:input_type -> NotImplemented
	121, // 128: FriendsList.GetCategories:input_type -> CFriendsList_GetCategories_Request
	129, // 129: FriendsList.GetFriendsList:input_type -> CFriendsList_GetFriendsList_Request
	124, // 130: FriendsList.GetFavorites:input_type -> CFriendsList_GetFavorites_Request
	126, // 131: FriendsList.SetFavorites:input_type -> CFriendsList_SetFavorites_Request
	128, // 132: FriendsListClient.FavoritesChanged:input_type -> CFriendsList_FavoritesChanged_Notification
	131, // 133: Clan.RespondToClanInvite:input_type -> CClan_RespondToClanInvite_Request
	135, // 134: ExperimentService.ReportProductImpressionsFromClient:input_type -> NotImplemented
	1,   // 135: Community.GetApps:output_type -> CCommunity_GetApps_Response
	3,   // 136: Community.GetAppRichPresenceLocalization:output_type -> CCommunity_GetAppRichPresenceLocalization_Response
	7,   // 137: Community.GetCommentThread:output_type -> CCommunity_GetCommentThread_Response
	8,   // 138: Community.PostCommentToThread:output_type -> CCommunity_PostCommentToThread_Response
	9,   // 139: Community.DeleteCommentFromThread:output_type -> CCommunity_DeleteCommentFromThread_Response
	10,  // 140: Community.RateCommentThread:output_type -> CCommunity_RateCommentThread_Response
	11,  // 141: Community.GetCommentThreadRatings:output_type -> CCommunity_GetCommentThreadRatings_Response
	12,  // 142: Community.RateClanAnnouncement:output_type -> CCommunity_RateClanAnnouncement_Response
	13,  // 143: Community.GetClanAnnouncementVoteForUser:output_type -> CCommunity_GetClanAnnouncementVoteForUser_Response
	15,  // 144: Community.GetUserPartnerEventNews:output_type -> CCommunity_GetUserPartnerEventNews_Response
	17,  // 145: Community.GetBestEventsForUser:output_type -> CCommunity_GetBestEventsForUser_Response
	25,  // 146: Community.MarkPartnerEventsForUser:output_type -> CCommunity_MarkPartnerEventsForUser_Response
	26,  // 147: Community.GetUserPartnerEventViewStatus:output_type -> CCommunity_GetUserPartnerEventViewStatus_Response
	22,  // 148: Community.PartnerEventsShowMoreForApp:output_type -> CCommunity_PartnerEventsShowMoreForApp_Response
	23,  // 149: Community.PartnerEventsShowLessForApp:output_type -> CCommunity_PartnerEventsShowLessForApp_Response
	18,  // 150: Community.ClearUserPartnerEventsAppPriorities:output_type -> CCommunity_ClearUserPartnerEventsAppPriorities_Response
	20,  // 151: Community.GetUserPartnerEventsAppPriorities:output_type -> CCommunity_GetUserPartnerEventsAppPriorities_Response
	21,  // 152: Community.ClearSinglePartnerEventsAppPriority:output_type -> CCommunity_ClearSinglePartnerEventsAppPriority_Response
	40,  // 153: WebRTCClient.InitiateWebRTCConnection:output_type -> CWebRTCClient_InitiateWebRTCConnection_Response
	45,  // 154: WebRTCClient.AcknowledgeUpdatedRemoteDescription:output_type -> CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
	140, // 155: WebRTCClientNotifications.NotifyWebRTCSessionConnected:output_type -> NoResponse
	140, // 156: WebRTCClientNotifications.NotifyWebRTCUpdateRemoteDescription:output_type -> NoResponse
	60,  // 157: VoiceChat.UpdateVoiceChatWebRTCData:output_type -> CVoiceChat_UpdateVoiceChatWebRTCData_Response
	140, // 158: VoiceChat.NotifyUserVoiceStatus:output_type -> NoResponse
	62,  // 159: VoiceChat.UploadClientVoiceChatLogs:output_type -> CVoiceChat_UploadClientVoiceChatLogs_Response
	63,  // 160: VoiceChat.LeaveVoiceChat:output_type -> CVoiceChat_LeaveVoiceChat_Response
	47,  // 161: VoiceChat.RequestOneOnOneChat:output_type -> CVoiceChat_RequestOneOnOneChat_Response
	50,  // 162: VoiceChat.AnswerOneOnOneChat:output_type -> CVoiceChat_AnswerOneOnOneChat_Response
	53,  // 163: VoiceChat.EndOneOnOneChat:output_type -> CVoiceChat_EndOneOnOneChat_Response
	55,  // 164: VoiceChat.LeaveOneOnOneChat:output_type -> CVoiceChat_LeaveOneOnOneChat_Response
	140, // 165: VoiceChatClient.NotifyUserJoinedVoiceChat:output_type -> NoResponse
	140, // 166: VoiceChatClient.NotifyUserLeftVoiceChat:output_type -> NoResponse
	140, // 167: VoiceChatClient.NotifyVoiceChatEnded:output_type -> NoResponse
	140, // 168: VoiceChatClient.NotifyUserVoiceStatus:output_type -> NoResponse
	140, // 169: VoiceChatClient.NotifyAllUsersVoiceStatus:output_type -> NoResponse
	140, // 170: VoiceChatClient.NotifyOneOnOneChatRequested:output_type -> NoResponse
	140, // 171: VoiceChatClient.NotifyOneOnOneChatResponse:output_type -> NoResponse
	66,  // 172: SteamTV.CreateBroadcastChannel:output_type -> CSteamTV_CreateBroadcastChannel_Response
	67,  // 173: SteamTV.GetBroadcastChannelID:output_type -> CSteamTV_GetBroadcastChannelID_Response
	68,  // 174: SteamTV.SetBroadcastChannelProfile:output_type -> CSteamTV_SetBroadcastChannelProfile_Response
	69,  // 175: SteamTV.GetBroadcastChannelProfile:output_type -> CSteamTV_GetBroadcastChannelProfile_Response
	70,  // 176: SteamTV.SetBroadcastChannelImage:output_type -> CSteamTV_SetBroadcastChannelImage_Response
	71,  // 177: SteamTV.GetBroadcastChannelImages:output_type -> CSteamTV_GetBroadcastChannelImages_Response
	76,  // 178: SteamTV.SetBroadcastChannelLinkRegions:output_type -> CSteamTV_SetBroadcastChannelLinkRegions_Response
	73,  // 179: SteamTV.GetBroadcastChannelLinks:output_type -> CSteamTV_GetBroadcastChannelLinks_Response
	88,  // 180: SteamTV.GetBroadcastChannelBroadcasters:output_type -> CSteamTV_GetBroadcastChannelBroadcasters_Response
	79,  // 181: SteamTV.GetFollowedChannels:output_type -> CSteamTV_GetFollowedChannels_Response
	80,  // 182: SteamTV.GetSubscribedChannels:output_type -> CSteamTV_GetSubscribedChannels_Response
	77,  // 183: SteamTV.GetBroadcastChannelStatus:output_type -> CSteamTV_GetBroadcastChannelStatus_Response
	81,  // 184: SteamTV.FollowBroadcastChannel:output_type -> CSteamTV_FollowBroadcastChannel_Response
	82,  // 185: SteamTV.SubscribeBroadcastChannel:output_type -> CSteamTV_SubscribeBroadcastChannel_Response
	119, // 186: SteamTV.GetBroadcastChannelClips:output_type -> CSteamTV_GetBroadcastChannelClips_Response
	83,  // 187: SteamTV.ReportBroadcastChannel:output_type -> CSteamTV_ReportBroadcastChannel_Response
	84,  // 188: SteamTV.GetBroadcastChannelInteraction:output_type -> CSteamTV_GetBroadcastChannelInteraction_Response
	86,  // 189: SteamTV.GetGames:output_type -> CSteamTV_GetGames_Response
	87,  // 190: SteamTV.GetChannels:output_type -> CSteamTV_GetChannels_Response
	92,  // 191: SteamTV.AddChatBan:output_type -> CSteamTV_AddChatBan_Response
	93,  // 192: SteamTV.GetChatBans:output_type -> CSteamTV_GetChatBans_Response
	95,  // 193: SteamTV.AddChatModerator:output_type -> CSteamTV_AddChatModerator_Response
	98,  // 194: SteamTV.GetChatModerators:output_type -> CSteamTV_GetChatModerators_Response
	99,  // 195: SteamTV.AddWordBan:output_type -> CSteamTV_AddWordBan_Response
	100, // 196: SteamTV.GetWordBans:output_type -> CSteamTV_GetWordBans_Response
	102, // 197: SteamTV.JoinChat:output_type -> CSteamTV_JoinChat_Response
	103, // 198: SteamTV.Search:output_type -> CSteamTV_Search_Response
	104, // 199: SteamTV.GetSteamTVUserSettings:output_type -> CSteamTV_GetSteamTVUserSettings_Response
	105, // 200: SteamTV.SetSteamTVUserSettings:output_type -> CSteamTV_SetSteamTVUserSettings_Response
	106, // 201: SteamTV.GetMyBroadcastChannels:output_type -> CSteamTV_GetMyBroadcastChannels_Response
	117, // 202: SteamTV.GetHomePageContents:output_type -> CSteamTV_GetHomePageContents_Response
	122, // 203: FriendsList.GetCategories:output_type -> CFriendsList_GetCategories_Response
	130, // 204: FriendsList.GetFriendsList:output_type -> CFriendsList_GetFriendsList_Response
	125, // 205: FriendsList.GetFavorites:output_type -> CFriendsList_GetFavorites_Response
	127, // 206: FriendsList.SetFavorites:output_type -> CFriendsList_SetFavorites_Response
	140, // 207: FriendsListClient.FavoritesChanged:output_type -> NoResponse
	132, // 208: Clan.RespondToClanInvite:output_type -> CClan_RespondToClanInvite_Response
	140, // 209: ExperimentService.ReportProductImpressionsFromClient:output_type -> NoResponse
	135, // [135:210] is the sub-list for method output_type
	60,  // [60:135] is the sub-list for method input_type
	60,  // [60:60] is the sub-list for extension type_name
	60,  // [60:60] is the sub-list for extension extendee
	0,   // [0:60] is the sub-list for field type_name
}

func init() { file_webui_friends_proto_init() }
func file_webui_friends_proto_init() {
	if File_webui_friends_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_webui_friends_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response_TokenList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetCommentThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PostCommentToThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_DeleteCommentFromThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_RateCommentThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetCommentThreadRatings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_RateClanAnnouncement_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetClanAnnouncementVoteForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAppPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetUserPartnerEventNews_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetBestEventsForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_ClearUserPartnerEventsAppPriorities_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventsAppPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetUserPartnerEventsAppPriorities_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_ClearSinglePartnerEventsAppPriority_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventsShowMoreForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventsShowLessForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_MarkPartnerEventsForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetUserPartnerEventViewStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetProfileBackground_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_SetProfileBackground_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetMiniProfileBackground_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_SetMiniProfileBackground_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetAvatarFrame_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_SetAvatarFrame_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetAnimatedAvatar_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_SetAnimatedAvatar_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetProfileItemsOwned_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPlayer_GetProfileItemsEquipped_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTCClient_InitiateWebRTCConnection_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTCClient_InitiateWebRTCConnection_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTC_WebRTCSessionConnected_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTC_WebRTCUpdateRemoteDescription_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_RequestOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_RequestOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_OneOnOneChatRequested_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_AnswerOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_AnswerOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_OneOnOneChatRequestResponse_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_EndOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_EndOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_LeaveOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_LeaveOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UserJoinedVoiceChat_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UserVoiceStatus_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_AllMembersStatus_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UpdateVoiceChatWebRTCData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UpdateVoiceChatWebRTCData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UploadClientVoiceChatLogs_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UploadClientVoiceChatLogs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_LeaveVoiceChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UserLeftVoiceChat_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_VoiceChatEnded_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_CreateBroadcastChannel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelID_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelProfile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelProfile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelImage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelImages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelImages_Response_Images); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelLinks_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelLinks_Response_Links); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelLinkRegions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBroadcastChannelEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetFollowedChannels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetSubscribedChannels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_FollowBroadcastChannel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SubscribeBroadcastChannel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_ReportBroadcastChannel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelInteraction_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetGames_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChannels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelBroadcasters_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_ChatBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddChatBan_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddChatBan_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChatBans_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddChatModerator_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddChatModerator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChatModerators_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_ChatModerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChatModerators_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddWordBan_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetWordBans_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_JoinChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_JoinChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_Search_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetSteamTVUserSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetSteamTVUserSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetMyBroadcastChannels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_Takeover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_SingleGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_GameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_QuickExplore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_ConveyorBelt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_WatchParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_Developer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageContentRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetHomePageContents_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_BroadcastClipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelClips_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsListCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetCategories_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetCategories_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsListFavoriteEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetFavorites_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetFavorites_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_SetFavorites_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_SetFavorites_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_FavoritesChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetFriendsList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetFriendsList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClan_RespondToClanInvite_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClan_RespondToClanInvite_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CProductImpressionsFromClient_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CProductImpressionsFromClient_Notification_Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webui_friends_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotImplemented); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webui_friends_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   136,
			NumExtensions: 0,
			NumServices:   10,
		},
		GoTypes:           file_webui_friends_proto_goTypes,
		DependencyIndexes: file_webui_friends_proto_depIdxs,
		MessageInfos:      file_webui_friends_proto_msgTypes,
	}.Build()
	File_webui_friends_proto = out.File
	file_webui_friends_proto_rawDesc = nil
	file_webui_friends_proto_goTypes = nil
	file_webui_friends_proto_depIdxs = nil
}
